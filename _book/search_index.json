[["index.html", "Od Excelu k R O knize eho chci spolu s vámi dosáhnout Zptná vazba O autorovi", " Od Excelu k R Marek Prokop 14.3.2022 O knize Tuto knihu i spíe sérii lánk a návod jsem napsal pedevím pro své klienty, které uím vyuívat R v marketingu. Pokud k nim patíte, mám radost, e jste kníku oteveli a chcete se pustit do studia. A spolu budeme analyzovat klíová slova, výsledky SEO nebo chování vaich zákazník, vyuijete ve, co se zde nauíte. Ale teba mými klienty nejste. Nevadí. Kdy u jsem knihu napsal, byla by koda, kdyby neslouila i vám. Základy, které zde vykládám, se vám budou hodit skoro v kadém oboru, na který se R chystáte aplikovat. Ukáu vám vci, které asi bn dláte v Excelu a v R jdou udlat hodn podobn. A nauím vás i vci, které taky dláte v Excelu, ale v R jdou udlat o dost lépe. U tím na tom vydláte, pokud se do toho se mnou pustíte. A nkdy pozdji, a tahle série skoní a vy budete mít základy v malíku, vám teba ukáu i to, co dlám v R jako markeák a Excel by mi na to rozhodn nestail. eho chci spolu s vámi dosáhnout Mám velmi jednoduchý cíl: pedpokládám, e umíte docela slun Excel nebo jiný spreadsheet, teba Google Sheets. Nepedpokládám, e umíte cokoli jiného, nap. programovat. Z toho jsem pi psaní vycházel a snaím se toho dsledn dret. Výklad by tedy ml být srozumitelný i neajákm a programátoi nebo kodéi se u nj mohou nudit. Na druhou stranu od vá ekách uritou zvídavost a chu se uit. Nedlejte jen to, co vám eknu. Experimentujte, dohledávejte si dalí informace na webu, studujte R z více zdroj souan. Na dleité zdroje vás budu prbn odkazovat. Na kapitoly pohlíejte jako na navazující lekce. Procházejte je jednu za druhou a ihned si zkouejte vechny píklady. Zptná vazba Budu moc rád, kdy m upozorníte na chyby a nedostatky. Nco vám nefunguje, nebo jste nco nepochopili a lo by to vysvatlit lépe? Napite mi prosím. Ideáln jako issue na Githubu, nebo e-mailem na mprokop@prokopsw.cz. Dkuju! O autorovi Aby nedolo k mýlce, nejsem expert na R. Zaal jsem se ho uit asi ped pti lety a poád ho moc neumím. Tím spí mám ale jet v hlav, co mi v zaátcích nejvíc chyblo a co jsem se uil z pohledu praxe zbyten brzo. A se vám studium daí! Marek Prokop, Praha, bezen 2022 "],["proc-r.html", "1 Pro jsem vymnil Excel za R 1.1 Co je R a RStudio 1.2 Pro koho je R vhodné 1.3 Kdo by se do R rozhodn neml poutt 1.4 Co vám R ve srovnání s Excelem pinese 1.5 Pro zrovna R a ne teba Python", " 1 Pro jsem vymnil Excel za R Spreadsheety pouívám od konce 80. let prakticky denn. Multiplan, Supercalc, Quatro, Lotus, Excel, Google Sheets. Jsou bájené, miluju je, ale nkolik posledních let po nich sahám u jen párkrát do msíce. Vtinu asu toti pouívám R a RStudio. Je to dáno nároky mé práce, vyí efektivitou a taky tím, e m R víc baví. Moná jste na tom podobn jako já a R pro vás bude taky vhodnjí. A moná nebude. Máte mu dát anci? Zlepí vá pracovní ivot, nebo to bude ztracený as? Zkusím vám pomoci, abyste se rozhodli správn. 1.1 Co je R a RStudio R je programovací jazyk (to zní stran, co?) navrený pro statistiku. Tradin se pouívá pro zpracování dat z medicinských i vdeckých výzkum, ale ím dál astji po nm sahají i datoví analytici z byznysu. Zárove je to interaktivní prostedí vhodné pro rychlé ad hoc výpoty a také je to ekosystém desitek tisíc knihoven (íká se jim balíky), které pomáhají eít nejrznjí úkoly snad ze vech obor lidské innosti. Samotné R u ale pouívá málokdo. Vtina uivatel pracuje v RStudiu, co je integrované vývojové prostedí (IDE), které umouje mnohem pohodlnjí a efektivnjí práci ne základní prostedí R. Podstatné je, e R (i RStudio) vymýleli a poád jet vymýlejí statistici, vdci, analytici, nikoli programátoi. Obecn je proto blií spí neprogramátorm, nap. tím, e má pímo v sob zabudovanou velmi podrobnou a snadno dostupnou nápovdu. Ve vtin programovacích jazycích se programuje, ale R se spí pouívá. Jako Excel :-) 1.2 Pro koho je R vhodné U jsem íkal, e R tradin pouívají lékai, biologové a jiní vdci, nap. k tomu, aby na základ experiment vyhodnotili, který lék je jak úinný, nebo co ovlivuje vznik rakoviny. Viml jsem si také, e je R docela populární ve financích, nap. pro výpoty investic nebo pojistných rizik. Já ale vdec, léka ani banké nejsem, take budu mluvit spí o svém oboru, co je marketing. V marketingu se R velmi dobe hodí nap. k vyhodnocování A/B test, pro zákaznickou analytiku (pro nkteí zákaznici nakupují víc a jiní mí), analýzy prodeje, návtvnosti, nebo teba PPC (pay per click reklama) a SEO (optimalizace pro vyhldavae). Je to i brána do svta strojového uení, které jde aplikovat nap. na analýzu on-line obsahu nebo vazeb v sociálních sítích. Jiná otázka je, pro koho je R vhodné z pohledu profesních a osobnostních pedpoklad. Kdy to posuzuju podle sebe a dalích, které jsem v téhle souvislosti potkal, R sedne: analytickým typm, pro které je Excel základ, ale trápí je jeho omezení, lidem, kteí si rádi lámou hlavu víc ne ostatní, rádi se uí a hledají nové cesty, lidem, kteí se nebojí neho, co vypadá jako programování, nebo u mají s kódováním i skriptováním urité zkuenosti. 1.3 Kdo by se do R rozhodn neml poutt Asi je hloupost se do R poutt, pokud ho k niemu nepotebujete. Pouíváte Excel, pracujete v nm rychle a efektivn a nikdy jste nenarazili na nic, co by neuml? Pak R nejspí nepotebujete. Kdy slyíte slova jako programování, kódování, skripty nebo programovací jazyk, dostáváte vyráku a zane vás bolet hlava? Pak pro vás R taky nebude. Nebo naopak bravurn programujete v Pythonu a jste s ním pro své datov-analytické poteby naprosto spokojeni? Ani pak R spí nevyuijete. Do R se radji nepoutjte ani v pípad, e neumíte alespo pasivn anglicky. Anglických zdroj je na webu bambilion, ale eských jen pár. 1.4 Co vám R ve srovnání s Excelem pinese Strun: ryhlost, efektivitu, více moností, eleganci. A zárove trochu trápení pi studiu. Jde to íct i konkrétnji: Na velmi jednoduché ad hoc (neopakované) úlohy nepinese R nic. Kdy si chci udlat rychlý rozpoet narozeninové oslavy, vezmu si na to Google Sheets a ne R. Pokud budu chtít z firemní databáze vytáhnout, které zboí se nejvíc prodává nap. podle roní doby, mohu to udlat v Excelu i v R. Vyberu si ale R, protoe to udlám rychleji, elegantnji a postup pjde snáz kdykoli zopakovat s erstvými daty. Na obsahovou analýzu tweet konkurence si vzmu urit R, protoe to by Excel vbec nezvládl. Speciálními výhodami R pak je R Markdown a Shiny. Tím prvním jdou dlat znovupouitélné, automatické, moc hezky vypadající reporty, které ocení kadý, kdo pracuje pro klienty nebo pro nároného éfa. To druhé slouí k tvorb interaktivních webových aplikací, které zpracují nejrznjí data a úhledn zobrazí výsledek. 1.5 Pro zrovna R a ne teba Python Kdy se chcete pustit do datové analytiky a udláte si rychlou reeri, co byste se mli nauit, vypadne na vás R, nebo Python (nebo obojí). Tyhle dva jazyky se na data pouívají nejvíc a u dlouho spolu v popularit soupeí. Strun eeno, jsou mezi nimi tyto rozdíly: Python je z programátorského hlediska hezí\" jazyk a programátorm sedne lépe. R je naopak vhodnjí pro neprogramátory. Python je o nco lépe vybaven pro strojové uení, NLP (zpracování pirozeného jazyka), automatizaci a software v bné produkci. R je naopak o nco lepí na interaktivní práci nebo ad hoc úlohy, ve kterých pedem úpln nevíte, eho pesn chcete dosáhnout. Python je univerzální jazyk a mete si v nm naprogramovat teba e-shop. To by v R asi nelo, by základní obsahové weby zvládne taky. R má (zatím) rozvinutjí ekosystém knihoven. Google Analytics, Search Console, Google Drive nebo Google Sheets  nic není problém, to ve u je v R dávno vyeené. Kdy jsem tohle psal (bezen 2022), evidoval oficiální repozitá CRAN 18 910 eRkových balík snad na úpln vechno. "],["instalace-a-nastaveni.html", "2 Instalace a nastavení 2.1 Cloud nebo instalace 2.2 Instalace R 2.3 Instalace RStudia 2.4 Pokud u R a RStudio máte (a trochu znáte) 2.5 Zalote si cviný projekt 2.6 Nastavení RStudia 2.7 Instalace balík", " 2 Instalace a nastavení Potebujete dv vci: samotné R, které je hodn spartánské a pracuje se v nm blb, a RStudio, které je naopak super komfortní a kdy ho máte, do základního R u nikdy nevlezete. 2.1 Cloud nebo instalace Dobrá zpráva: pokud nechcete, nic si instalovat nemusíte. Pro první pokusy i pro vánjí práci mete pouít RStudio.cloud, které bí v prohlíei. ivot s ním budete mít o dost jednoduí, ale penenku o nco prázdnjí. RStudio.cloud sice má variantu zdarma, ale v té mete pracovat maximáln 15 hodin msín (za 5 USD 50 hodin msín) a dostanete jen 1 GB RAM a 1 CPU, co není mnoho. Pouitelná verze vás pak bude stát od 25 USD (small business) a dostanete 160 hodin msín, a 8 GB RAM a a 4 CPU. Hodiny se ale násobí potem CPU a velikostí RAM. Jestli v cloudu pracovat nechcete, musíte nainstalovat jednak R a jednak RStudio. Obojí je snadné a zdarma. Pro vánjí práci budete asem potebovat jet Git. Ten je taky zdarma, ale rozchodit ho nemusí být úpln triviální. Moje doporuení: jestli chcete R jen nezávazn vyzkouet, zvlote cloud. Instalovat mete kdykoli pozdji. 2.2 Instalace R Stáhnte a nainstalujte si zkompilovanou verzi R pro svj operaní sytém z https://cloud.r-project.org/. ádná past by tam být nemla, postupujte podle instrukcí na webu a v instalátoru. Kdy po instalaci R spustíte, mlo by vypadat njak takhle: Základní R po sputní Okno zavete a to je vechno. Odt mete na základní R zapomenout. 2.3 Instalace RStudia Stáhnte a nainstalujte si RStudio Desktop z https://www.rstudio.com/products/rstudio/download/. I to by mlo jít bez problém a sputné RStudio pak bude vypadat njak takto: RStudio po prvním sputní 2.4 Pokud u R a RStudio máte (a trochu znáte) Pro jistotu si zkontrolujte verzi RStudia i R. Verzi R vám ekne konsole pi sputní a kdykoli pozdji ji zjistíte píkazem: R.version.string ## [1] &quot;R version 4.1.2 (2021-11-01)&quot; Poslední verze (zjistíte na webu R) je nejlepí, ale kdy budete o pár desetinek pozadu, nic váného se nestane. On je upgrade R malinko opruz, take ho nechcete dlat zbyten. Rozhodn si ale aktualizujte nainstalované balíky, protoe to jde snadno píkazem: update.packages(ask = FALSE, checkBuilt = TRUE) Pokud byste mli starou verzi RStudia, jde ho normáln peinstalovat. 2.5 Zalote si cviný projekt Tohle fakt hned te udlejte. Je to dleité. Po sputní RStudia zvolte píkaz New Project z menu File, nebo z roletky projekt vpravo nahoe. Na dalí obrazovce zvolte New Directory. Dialog Create Project Na dalí New Project. Volba typu projektu A nakonec zadejte název sloky, ve které se má projekt vytvoit. Me to být výchozí (domovská) sloka pro R (~/R) nebo jakákoli jiná, kterou si vytvoíte jako nadízenou sloku pro podloky eRkových projekt. Teba u m to je c:/dev/R (pro moje projekty), nebo c:/dev/R/clients (pro klientské projekty). Volba sloky projektu 2.5.1 Co jsou projekty V RStudiu se nejastji pracuje v tzv. projektech. Jde to sice i bez nich, ale projekty jsou praktické, protoe si pamatují rzná nastavení, poslední otevené soubory, historii píkaz apod. Na vaem poítai jeden projekt vdy odpovídá jedné sloce (s pípadnými podslokami), do které si RStudio uloí projektový soubor nazev-projektu.Rproj. Tímto souborem jde pak projekt otevít nap. z Przkumníka Windows. K projektm jet pár doporuení a vysvtlení: V nkterých situacích vám zjednoduí ivot, kdy budete projekty pojmenovávat podobn jako webová URL, tj. jen písmeny malé anglické abecedy, ísly, pomlkami a tekami. Nutné to ale není. Po standardní instalaci vám na Windows (jinde to me být jiné) ve sloce Dokumenty vznikne podsloka R, kterou pak RStudio (i samotné R) oznauje aliasem ~/R. Projekty ale mete zakládat i jinde. A u si projekt zaloíte kdekoli, doporuuji si pro vechny projekty zvolit jedinou zasteující sloku, protoe v rzných kontextech se vám pak zobrazí jen název projektu, a pokud byste na více místech mli stejn pojmenované projekty, pletlo by vás to. Pokud máte nebo a budete mít zprovoznný Git, objeví se vám pi volb sloky i volba Create a git repository. Vdycky ji zapínejte. Pro první pokusy ale Git nepotebujete. 2.6 Nastavení RStudia R i RStudio je ve výchozím stavu nastaveno v zásad dobe. Zmte prosím jen dv vci. Z menu Tools vyberte píkaz Global Options (úpln na konci) a v následujícím dialogu vypnte volbu Restore .RData into workspace at startup a volbu Save workspace to .RData on exit nastavte na Never. RStudio: Options - General A pak na panelu Code zapnte volbu Use native pipe operator. To sice není nutné, ale ve se pak bude chovat stejn, jako v mých ukázkách. RStudio: Options - Code 2.7 Instalace balík Základní R je jenom jazykové jádro s nezbytnými píkazy a funkcemi. Jeho funknost roziují tzv. balíky (packages), kterým se v jiných jazycích asto íká knihovny. Balíky je poteba jednak nainstalovat (jednorázov) a jednak pipojit ped konkrétní prací, ke které je potebujete (vysvtlím pozdji). V RStudiu Desktop u jsou nkteré balíky pedinstalované a jet víc jich je v cloudovém RStudio, ale pro jistotu vám ukáu, jak nainstalujete ty, které budete potebovat pro celý tenhle seriál. Z menu Tools zvolte píkaz Install Packages. Objeví se tento dialog: Dialog Install Packages Nechte v nm pedvyplnné volby a do prázdného políka vlote tento seznam balík: janitor, knitr, lubridate, rmarkdown, readxl, rvest, tidyverse Alternativn jde balíky instalovat funkcí install.packages(), kterou zavoláte teba z konsole (vysvtlím za chvíli). To pak vypadá takhle: install.packages(c(&quot;janitor&quot;, &quot;knitr&quot;, &quot;lubridate&quot;, &quot;rmarkdown&quot;, &quot;readxl&quot;, &quot;rvest&quot;, &quot;tidyverse&quot;)) Oba zpsoby balíky zárove aktualizují, co se obas hodí. "],["prvni-kroky.html", "3 První kroky v R a RStudiu 3.1 Excel vs. R 3.2 Ti zpsoby práce s R 3.3 Interaktivní práce s konsolí 3.4 Práce se skripty 3.5 R Markdown 3.6 Z téhle kapitoly si pamatujte", " 3 První kroky v R a RStudiu Nebudu vám tajit, e se zpsob práce v R se od Excelu na první pohled dost lií. Excel vám naservíruje pipravený rastr bunk, do kterých mete rovnou psát hodnoty a vzorce. V R naopak zaínáte s prázdnou plochou, a co si sami neudláte, to nemáte. 3.1 Excel vs. R Kdy budete chtít v Excelu se íst dv ísla ve dvou rzných bukách, nejprve je do tch bunk napíete. Nap. íslo 10 do buky A1 a íslo 20 do buky B1. Do buky C1 pak mete dát vzorec =A1+B1, který ísla sete. V R to udláte podobn jen musíte napsat kód, který buky\" (v R se jim íká objekty) zaloí a pak sete. Ten kód me vypadat teba takhle: prvni_cislo &lt;- 10 druhe_cislo &lt;- 20 prvni_cislo + druhe_cislo ## [1] 30 Pípadn mete, stejn jako v Excelu, dv ísla rovnou seíst: 10 + 20 ## [1] 30 A nebo výsledek uloit do jiné buky\" (objektu): prvni_cislo &lt;- 10 druhe_cislo &lt;- 20 vysledek &lt;- prvni_cislo + druhe_cislo a tu si pak zobrazit: vysledek ## [1] 30 Ve skutenosti je to o dost pestejí. Mete jedním vzorcem\" (v R se tomu íká výraz nebo píkaz) zpracovat celou adu nebo tabulku rzných hodnot a výsledek zobrazit mnoha zpsoby  jako tabulku, formátovaný text, graf. To ve se v této kníce nauíte. 3.2 Ti zpsoby práce s R S R jde pracovat mnoha rznými zpsoby. Já nejastji pouívám ti: Interaktivní práce v konsoli. Polointeraktivní práce se skriptem. Interaktivní, poloautomatická i zcela automatická tvorba dokumentu v R Markdownu. Vechny ti ukáu na jednoduchém píkladu: pedstavte si, e jste dnes ve svém obchod vydali 100 útenek. Te se chcete rychle dozvdt, kolik dlá celková trba a jaká byla typická útrata jednoho zákazníka. 3.3 Interaktivní práce s konsolí Vae RStudio vypadá njak takhle a konsole je ta velká plocha vlevo. Psát budete za zobáek úpln vlevo (jinam ani nejde umístit kursor), kadý ádek vdy odentrujete a konsole vám vtinou njak odpoví. RStudio: Console Nejprve si vygenerujte útenky. Budou sice trochu falené, ale to nevadí. Do konsole napite: cena &lt;- round(rnorm(n = 100, mean = 1000, sd = 200), digits = 2) Odentrujte a nic se nestane. Vlastn stane. Pokud se podíváte doprava na záloku Environment, uvidíte tam tohle: RStudio: Výsledek piazení Píkazem jste toti vytvoili v prostedí R (environment) nový objekt cena a uloili jste do nj sto (skoro) náhodných ísel. Na vechny se mete podívat píkazem: cena ## [1] 1313.50 852.97 1299.17 1101.12 1265.29 1095.57 951.85 1046.22 1211.50 ## [10] 1344.75 924.75 912.20 1118.69 1129.49 838.11 1009.95 1325.39 623.74 ## [19] 1165.42 1108.97 1125.64 1160.80 1245.09 1347.24 845.40 840.87 1008.40 ## [28] 1246.16 1085.26 838.15 1067.85 912.95 791.18 1094.06 763.67 675.66 ## [37] 1064.96 944.25 821.20 897.11 1096.06 1046.28 1034.73 1424.97 1139.98 ## [46] 830.39 1125.03 806.31 680.22 1123.28 1171.31 993.00 1017.22 1355.22 ## [55] 1308.51 1008.59 1091.26 1046.76 926.73 1427.32 855.49 977.59 690.36 ## [64] 834.76 1039.68 1146.19 483.66 786.79 1142.82 1158.08 942.70 929.64 ## [73] 961.66 1026.85 828.12 1092.36 1053.81 1217.64 980.76 1050.63 716.56 ## [82] 902.69 1063.33 996.75 560.75 1059.34 1023.96 776.48 1124.79 1009.48 ## [91] 1094.83 1133.02 711.34 763.66 455.89 823.06 981.75 1255.46 1118.57 ## [100] 1036.06 co pak na konsoli vypadá njak takhle: Výsledek píkazu cena Te vám to ale musím vysvtlit trochu podrobnji. 3.3.1 Objekty (promnné) Objekt jazyka R se chová podobn jako promnná v jiných programovacích jazycích. Je to vlastn takový uplík, do kterého si mete ukládat nejrznjí hodnoty: ísla, textové etzce, logické hodnoty (TRUE a FALSE ili pravda a nepravda) apod. Oproti jiným programovacím jazykm je tu pár zvlátností: Do objekt se piazuje znaky &lt;- ale mete si to zjednoduit klávesovou zkratkou Alt+- (Alt pomlka). Bné objekty R jsou ve skutenosti vektory. V jiných programovacích jazycích tomu obvykle odpovídá jednorozmrné pole. V praxi to znamená, e v íselném objektu nemusí být jen jedno íslo, ale me jich tam být moc. V naem píkladu jich je sto. R s vektory automaticky i poítá. K vektoru pti ísel tedy mete piíst jedno íslo (ve skutenosti vektor s jedním íslem) a ono se automaticky pite ke vem pti. Kde se nám tam tch sto ísel vzalo? Získali jsme je funkcemi rnorm a round. 3.3.2 Funkce Pouka praví, e kdy to existuje, je to objekt, a kdy to nco dlá, je to funkce. Mete to brát i tak, e funkce je vechno, co má za svým jménem kulaté závorky. V závorkách mohou být tzv. parametry (nkdy se jim íká argumenty; je to toté), ili vstupní data, která chcete funkci pedat. Funkce tyto parametry njak zpracuje a vrátí výsledek. Vlastn úpln stejn, jako funkce v Excelu. U názv objekt i funkcí záleí na velikosti písmen. Cena je nco jiného ne cena, tak pozor na to. rnorm je funkce, která vrací (skoro) náhodná ísla. Skoro jsem dal do závorky, protoe vrácená ísla jsou náhodná v rámci normálního rozdlení (to je ta slavná Gaussova kivka), jeho podobu uríte parametry mean (prmr) a sd (smrodatná odchylka neboli standard deviation). Parametrem n navíc musíte urit, kolik tch ísel vlastn chcete. Následující píkaz tedy vrátí vektor sta náhodných ísel z normální rozdlení s prmrem 1000 a smrodatnou odchylkou 200. rnorm(n = 100, mean = 1000, sd = 200) ## [1] 929.0765 1000.6752 859.2816 886.6108 1116.5020 1124.4933 1346.0254 ## [8] 896.4459 922.5844 982.7215 1377.8819 1210.0747 1020.1688 945.6196 ## [15] 622.1906 1092.2925 926.1255 1489.8044 968.1818 724.4719 1226.8542 ## [22] 1120.8863 993.3575 1042.0119 938.2927 940.2405 926.1872 891.3258 ## [29] 943.1418 1536.6807 843.5040 1010.8165 1174.7704 970.0647 1098.7614 ## [36] 1380.2648 813.7411 780.3754 1089.4714 789.2701 1407.1866 967.5550 ## [43] 792.6016 1072.0444 1575.0512 498.4162 907.9306 1330.4388 923.7552 ## [50] 1065.4183 1073.5677 693.4179 1061.5519 1043.8958 1087.0316 1130.4896 ## [57] 1050.1444 913.4825 547.6536 1267.7323 679.3644 1179.9681 1000.9827 ## [64] 896.5537 1057.9204 869.9295 611.9101 704.6135 1267.2886 977.8140 ## [71] 825.1688 1088.8081 899.9069 919.4206 1244.4318 1157.4180 862.8977 ## [78] 850.7509 1351.7395 1150.4249 1028.7327 760.0631 799.6216 1159.5267 ## [85] 957.4050 1264.6187 1581.0996 1202.3929 891.3217 896.7847 776.4908 ## [92] 944.6789 1095.6345 1151.2154 1382.6991 1041.3723 1095.5456 861.8127 ## [99] 972.0023 896.4335 Klidn si ho zadejte párkrát do konzole s rznými parametry, abyste vidli, jak se mní výsledek. `round`` je funkce, která zaokrouhluje. První parametr je íselný vektor, který se má zaokrouhlit, a druhý parametr digits uruje, na kolik desetinných míst se má zaokrouhlit. Následující píkaz tedy zaokrouhlí íslo 1.145 na dv desetinná místa: round(1.145, digits = 2) ## [1] 1.15 První parametr funkce round se jmenuje x, ale první parametr funkce se asto píe bez jména, protoe jeho poadí nejde poplést. Kadopádn ale me napsat volání funkce i takto a výsledk bude stejný: round(x = 1.145, digits = 2) ## [1] 1.15 A te u asi chápete  funkce rnorm vrátí sto ísel s hodn desetinnými ísly, a proto jste její výsledek jet poslali funkci round, která celý vektor (tj. vech sto ísel) zaokrouhlila na dv desetinná místa. V jiném programovacím jazyce byste na to potebovali dost sloité výpoty v cyklech, v R staí tohle: round(rnorm(n = 100, mean = 1000, sd = 200), digits = 2) ## [1] 998.64 858.92 988.41 999.80 877.06 878.48 1045.54 988.54 913.05 ## [10] 787.58 890.02 1092.86 1175.63 1195.52 1053.57 1130.12 632.81 1242.16 ## [19] 946.23 1047.00 1430.02 1175.37 1325.02 810.88 953.92 1019.69 1030.89 ## [28] 1190.11 947.27 719.56 1169.41 751.88 1090.25 730.14 1081.96 801.48 ## [37] 955.72 746.86 1124.09 1248.23 850.71 880.58 1175.49 1243.45 844.21 ## [46] 841.73 1131.26 1267.94 808.03 799.18 991.35 770.40 967.60 1107.80 ## [55] 1091.85 1015.27 1125.12 1055.12 1418.28 880.04 1360.52 1198.53 1140.06 ## [64] 540.14 770.72 790.08 955.00 677.85 741.49 991.23 804.38 704.72 ## [73] 1250.56 1105.98 1051.01 1200.12 1168.22 984.14 946.48 1064.15 1220.24 ## [82] 834.88 1470.90 916.82 1385.60 1146.37 589.79 931.74 927.40 898.59 ## [91] 1200.78 1114.71 1185.21 981.70 1287.15 1029.75 902.63 869.05 1294.75 ## [100] 751.73 Mimochodem, vimli jste si v pedelých píkladech tch ísel v hranatých závorkách? Protoe se v píkladech vypisují jako výsledky vektory (vechny základní, tzv. atomické typy jsou v R vektory), R vám tmi ísly v hranatých závorkách íká, na jaké pozici ve vektoru daná hodnota je. A hranaté závorky jdou i pouít pro adresování konkrétního prvku vektoru. Teba tohle zobrazí z vytvoeného vektoru cena jenom pátý prvek: cena[5] ## [1] 1265.29 a tohle pátý a desátý: cena[5:10] ## [1] 1265.29 1095.57 951.85 1046.22 1211.50 1344.75 Chtli jsme jet útenky seíst, e? Je to hraka: sum(cena) ## [1] 100875.1 Zajímá vás, kolik dlá celková trba bez DPH? sum(cena / 121 * 100) ## [1] 83367.83 pípadn: sum(cena) / 121 * 100 ## [1] 83367.83 Obojí by vám mlo dát stejný výsledek. V prvním pípad se ale nejprve vydlí kadý jednotlivý prvek vektoru a pak se celý vektor sete, kdeto v druhém pípad se celý vektor nejprve sete a pak teprve vydlí. Zajímá vás rozloení ceny zobrazené v histogramu? hist(cena) Zobrazí se vám na panelu Plot vpravo (vá bude vypadat trochu jinak). Tím jste poznali dalí dv funkce (sum a hist). Za chvíli vám ukáu, jak toté udlat skriptem a v R Markdownu, ale nejdív pár slov k nápovd. 3.3.3 Integrovaná nápovda R má pímo v sob zabudovanou nápovdu ke kadé funkci. Ta se projevuje jednak tím, e kdy zanete psát název funkce, po pár znacích se zanou nabízet funkce, jejich název tmi znaky zaíná a v bublin se objeví struný popis. Tuto nápovdu lze pípadn vynutit klávesovou kombinací Ctrl+Space. Nápovda pi psaní názvu funkce Pokud máte funkci napsanou i se závorkami, Ctrl+Space vám napoví moné parametry. Nápovda pi psaní názvu funkce Mete té na konzoli zadat píkaz píkaz tvoený otazníkem a názvem funkce, nap. ?rnorm, a pak se vám oteve kompletní nápovda na panelu Help vpravo. Nápovda pi psaní názvu funkce A konen mete s kurzorem na názvu funkce stisknout F1 a dostanete opt kompletní nápovdu v panelu Help. Pi práci s R tedy nemusíte skoro googlit. Staí si pamatovat alespo pibliné názvy funkcí. 3.4 Práce se skripty Práce v konsoli je sice flexibilní, ale na víc ne pár píkaz dost nepraktická. Kdy udláte chybu, mete se sice ipkami nahoru a dol pohybovat po historii píkaz a opravovat je, ale není to ono. Chyby se mnohem lépe opravují ve skriptech. Z menu File  New File vyberte R Script a vlevo nahoe se vám oteve editor skript. Do nj si vlote vechny píkazy, které jste pedtím zadali postupn do konsole. Nemusíte to ale dlat run  podívejte se vpravo na záloku History a vida, jsou tam, e? Vyberte ty správné a tlaítkem To Source je pesute do skriptu. Okno RStudia by pam mlo vypadat njak takto: Skript v RStudiu Kdy nyní na kterémkoli ádku stisknete Ctrl+Enter, celý ádek se vykoná stejn, jako kdybyste ho zadali na konzoli. Mete i klávesou Shift vybrat víc ádk a pak se po Ctrl+Enter vykonají vechny. A konen mete tlaítkem Source nad editorem vykonat celý skript. Po vykonání celého skriptu by mlo okno RStudia vypadat njak takto: RStudio po vykonání celého skriptu Nezapomete si ale celý skript uloit pod njakým vhodným jménem (teba prvni-skript). Ml by se vám uloit do sloky projektu a ke jménu se automaticky pipojí pípona R. 3.4.1 Úprava skriptu Hlavní výhoda skriptu spoívá v tom, e jde snadno upravit a pak celý znovu spustit. Vyzkouejte si to. Hned v prvním ádku zmte rnorm za runif a odstrate této funkci parametry mean a sd, take zbude jen n. cena &lt;- round(runif(n = 100), digits = 2) Kdy te celý skript znovu sputíte píkazem Source (nebo klávesovou zkratkou Ctrl+Shift+S), poznáte, co se zmnilo? hist(cena) Ano, zmnil se histogram. Funkce rnorm toti vybírá náhodná ísla z normálního rozloení (random normal distribution) a histogram má proto tvar známe gaussovy kivky  ísla blíe prmru se vyskytnou pravdpodobnji ne ísla dál od prmru. Funkce runif (random uniform distribution) naproti tomu vybírá náhodná ísla z rovnomrného rozdlení, take pravdpodobnost zastoupení vech ísel mezi nulou a jednou je stejná. 3.5 R Markdown Skripty jsou praktické, ale mají dv nevýhody: Kdy nechcete provést celý skript najednou, patn se v nich hledá ást, kterou chcete spustit. Výstup není moc pehledný. Textový výstup se ne moc hezky zobrazí v konzoli, grafy na panelu Plots. Ob tyto nevýhody odstrauje R Markdown. 3.5.1 Co je R Markdown 3.5.1.1 Základní Markdown Samotný Markdown moná znáte. Je to jednoduchý znakovací jazyk, kterým jdou v ist textovém formátu vyznait základní strukturání a formátovací prvky  nadpisy, odstavce, odráky, odkazy, tuný text apod. Z toho pak jde vygenerovat výstupy v rzných formátech: nejastji v HTML, ale klidn i PDF, Word atd. Text v Markdownu vypadá nap. takto: # Tohle je nadpis 1. úrovn Tohle je bný odstavec. Víc odstavc je od sebe oddleno dvma Entry ili prázdným ádkem. ## Tohle je nadpis 2. úrovn Tohle je píklad [odkazu v textu](https://example.com). A tohle je píklad odráek: - první odraka, - druhé odráka, - tetí odráka. Jdou udlat i íslované body, které se automaticky oíslují podle poadí: 1. První bod. 1. Druhý bod. 1. Poslední bod. Jak vidíte, docela dobe se píe a dobe se i te, i kdy není pevedený (vyrenderovaný) do HTML. Ale kdy se pevede, je to výsledek docela hezký: Píklad pevedeného Mardownu 3.5.1.2 R Markdown R Mardown je Markdown, do kterého jsou zamíchané kusy eRkového kódu. Vypadá njak takhle: Píklad R Markdownu Vyzkouejte si nyní R Markdown sami. Nejprve si zalote nový soubor: Z menu File  New File vyberte R Notebook. Objeví se vám editor s pedvyplnným vzorovým obsahem. Ten celý zrute (Ctrl+A, Del) a zkopírujte do nj tohle: --- title: &quot;Mj první R Notebook&quot; output: html_notebook --- Toto je píklad [R Markdown](http://rmarkdown.rstudio.com) zápisníku (notebook). Zaíná nahoe metadaty, které zde udávají jen titulek a formát výstupu. Metadata jsou ohraniena ádky tvoenými temi pomlkami. Pak následuje normální Markdown. Za tímto odstavcem je blok eRkového kódu, kterému se íká *chunk* a já mu budu íkat *blok*. ```{r} cena &lt;- round(rnorm(n = 100, mean = 1000, sd = 200), digits = 2) sum(cena) ``` Pokud blok spustíte zelenou ipekou na jeho pravém horním okraji nebo klávesovou zkratkou Ctrl+Shift+Enter, provede se a zobrazí výstup pímo pod sebou. Výsledek bude vypadt jako na pedelém obrázku. Nyní mete podle instrukcí vykonat jediný blok kódu, který tam zatím máte, a pod blkoem se vám zobrazí souet ceny. A mete i celý soubor pevést do HTML a prohládnout si ho v celé kráse. Udláte to píkazem Preview z toolbaru nad editorem, ale ped tím jet musíte soubor uloit, teba pod jménem prvni-notebook. Ke jménu se automaticky pipojí pípona Rmd. Celý výsledek se zobrazí v panelu Viewer vpravo: Náhled vykresleného R Mardownu U jste pochopili, v em jsem napsal tenhle lánek? Ano, v RStudiu v R Markdownu :-) Ze vech tí zpsob pouívání R (konzole, skripty, R Markdown) pouívám R Markdown pro bné analýzy nejastji. Píu si v nm postup, eRkový kód i pouení z výsledk. Kdy se pak pozdji k analýze vrátím, teba proto, e chci pro jiného klienta udlat njakou podobnou, krásn vidím, jak jsem postupoval a co a pro jsem udlal. U tohle je pro m obrovská výhoda oproti excelové tabulce, ve které se u po pár týdnech nevyznám a musím znovu pracn zkoumat, co tam je, pro to tam a jak to vlastn funguje. A toté doporuuji i vám: klidn pro te zapomte, e njaká konzole a skripty vbec existují a pouívejte na vechno R Markdown. 3.6 Z téhle kapitoly si pamatujte 3.6.1 R Markdown Zvyknte si na R Markdown jako základní zpsob práce s R. Konzole se hodí pro pár pomocných píkaz, nebo abyste si vyzkoueli, jak která funkce funguje. Skripty se hodí pro dávkové zpracování bez interaktivity, kdy pesn víte, co a jak chcete udlat. Také se jimi definují nové funkce a píou balíky. Pro vechno ostatní je tu R Markdown. Kdy si budete cokoli z této knihy zkouet, zalote si na to R Notebook nebo R Markdown Document  ono je to skoro toté. Bude se vám hodit pár klávesovýc zkratek: Akce Windows &amp; Linux Mac Vlo blok kódu (chunk) Ctrl+Alt+I Command+Option+I Vlo piazení (znaky &lt;-) Alt+- Option+- Prove ádek kódu s kurzorem Ctrl+Enter Command+Enter Prove blok kódu s kurzorem Ctrl+Shift+Enter Command+Shift+Enter Prove vechny bloky v souboru Ctrl+Alt+R Command+Option+R Prove vechny bloky nad kurzorem Ctrl+Alt+P Command+Option+P Zobraz celý dokument v HTML Ctrl+Shift+K Command+Shift+K Jdi na dalí blok nebo titulek Ctrl+PgDown Command+PgDown Jdi na pedchozí blok nebo titulek Ctrl+PgUp Command+PgUp Nápovda k funkci s kurzorem F1 F1 Pokud si je nechcete pamatovat, vechny mají i své tlaítko bu na toolbaru nad editorem, nebo pímo v pravém horním rohu kadého bloku kódu. Funkce tlaítka se vám zobrazí po najetí myi. 3.6.2 Vektory Zatímco v Excelu máte v jedné buce jedno íslo (nebo jeden text, jedno datum apod.), objekt základního typu (íslo, text, logická hodnota) v R je vdy vektor. To znamená, e obsahuje uspoádanou adu hodnot daného typu. Vektor me mít délku 1, pak obsahuje jen jednu hodnotu, ale taky teba milion, a pak obsahhuje milion hodnot. S vektory poítají i bné operace. Kdy k vektoru s deseti ísly pitete jiný vektor s deseti ísly, bude výsledek opat vektor s deseti ísly, ve kterém se sete první s prvním, druhé s druhým atd. Pokud ale k vektoru s deseti ísly pitete vektor s jedním íslem, dojde k tzv. recyklaci druhého vektoru, co znamená, e se íslo z druhého vektoru postupn pite ke vem íslm prvního wektoru. Ukáu to radji na píkladu (funkce c tvoí vektory): c(10, 20, 30) + c(1, 2, 3) ## [1] 11 22 33 c(10, 20, 30) + 1 ## [1] 11 21 31 c(10, 20, 30) + c(1, 2) ## Warning in c(10, 20, 30) + c(1, 2): longer object length is not a multiple of ## shorter object length ## [1] 11 22 31 Vidíte, e poslední píklad sice upozorní na monou chybu, ale provede se podle pravidla recyklace. c(10, 20, 30, 40) + c(1, 2) ## [1] 11 22 31 42 Zde na chybo neupozorní, protoe se druhý vektor zrecykluje pesn dvakrát. 3.6.3 Funkce Funkce fungují úpln stejn jako v Excelu. Njak se jmenují a v závorce mají parametry. I kdy ádné parametry nemají, musí za nimi být prázdná závorka. Funkce stejn jako v Excelu vrátí njakou hodnotu a nikdy nezmní hodnotu parametr. Pár rozdíl tu ale peci jenom je: V názvech funkcí záleí na velikosti písmen. View a view jsou dv rzné funkce. Parametry jsou pojmenované, take jdou zapisovat zpsobem round(x = 1.145, digits = 2). Pokud ale dodrím závazné poadí parametr, mohu napsat i round(1.145, 2) a dostanu stejný výsledek. Funkce umí pracovat s vektory. To znamená, e nap. funkce round umí zakrouhoit mnoho rzných ísel naráz. "],["jak-dostat-data-do-r.html", "4 Jak dostat data do R 4.1 Co myslím daty 4.2 Runí vstup dat 4.3 Chci si jen rychle nco vyzkouet 4.4 Práce s CSV soubory 4.5 Data na webové stránce 4.6 Data z jiných zdroj", " 4 Jak dostat data do R Do Excelu nebo Google Sheets asi nejastji njaká data pímo napíete nebo odnkud zkopírujete a vloíte. Mete je také importovat odjinud, teba z CSV soubor, rzných databází nebo API. To ve plus nkolik dalích zpsob mete pouít i v R. 4.1 Co myslím daty Spreadsheet je datov velmi jednoduchý. Má jen listy, ty se skládají z bunk a kadá buka me (i nemusí) obsahovat hodnotu. Hodnoty moho být jen pár typ: íslo, text, logická hodnota (TRUE/FALSE). R to má trochu sloitjí. Pro doasné ukládání dat pouívá pojmenované objekty (nkdy se jim íká promnné prostedí), které mohou být mnoha typ, jak primitivních (íslo, text apod.), tak sloitjích (kterým se vtinou íká tída neboli class). 4.1.1 Data frame Jednomu listu spreadsheetu se nejvíc podobá eRková tída data frame. Je to vlastn klasická datová tabulka s ádky a sloupci. Rzné sloupce mohou obsahovat rzné typy dat  nkteré ísla, jiné text  ale v jednom sloupci mohou být data jen jednoho typu. Ukázkovou tabulkou je teba ceník: produkt jednotka cena skladem Malý roubek 100 g 10.0 TRUE Velký roub ks 5.0 TRUE Malá matika 100 g 8.5 FALSE Velká matka ks 6.0 TRUE První dva sloupce obsahují text, tetí sloupec ísla a poslední sloupec logické hodnoty (nkdy oznaované jako boolean): TRUE je pravda, FALSE je nepravda. Te u tedy víte, co je data frame, a v dalím textu vám ukáu, jak ho vytvoit a dostat do nj data. 4.2 Runí vstup dat V Excelu data run vkládáte rovnou do bunk listu. To sice jde v R také (ukáu pozdji), ale vtinou se to nedlá. Místo toho se napíe píkaz (nebo krátký skript ili posloupnost píkaz), který vytvoí data frame, naplní ho daty a výsledek uloí do objektu, se kterým mete dál pracovat. 4.2.1 Funnkce data.frame Konkrétn ceník výe jsem vytvoil tímto píkazem: sample_df &lt;- data.frame( produkt = c(&quot;Malý roubek&quot;, &quot;Velký roub&quot;, &quot;Malá matika&quot;, &quot;Velká matka&quot;), jednotka = c(&quot;100 g&quot;, &quot;ks&quot;, &quot;100 g&quot;, &quot;ks&quot;), cena = c(10, 5, 8.5, 6), skladem = c(TRUE, TRUE, FALSE, TRUE) ) Vysvtlím podrobnji: Do objektu sample_df piadím (neboli uloím) výsledek funkce data.frame. To jde zjednoduen napsat jako sample_df &lt;- data.frame(...), kde ti teky reprezentují tzv. argumenty (nebo té parametry) funkce data.frame. Znaky &lt;- se v R pouívají k piazení (uloení) hodnoty do objektu a v RStudiu je mete zadat klávesou zkratkou Alt+- (Alt pomlka). Argumenty funkce data.frame jsou jednotlivé sloupce, které má data frame mít. Zde to je produkt, jednotka, cena a skladem. Vzájemn jsou oddleny árkou, na rozdlení do ádk nezáleí. Sloupce se definují jako název_sloupce = vektor, píem vektor musí urovat hodnoty vech ádk data framu. V píkladu vektory zadávám jako výsledek funkce c. Ta vezme vechny své argumenty (oddlené árkou) a vytvoí z nich vektor. Vimnte si, e textové hodnoty se píí do uvozovek, kdeto íselné a logické ne. Jakmile máte data frame vytvoený a uloený do objektu sample_df, mete s ním dál pracovat, nap. vypsat jeho obsah: sample_df ## produkt jednotka cena skladem ## 1 Malý roubek 100 g 10.0 TRUE ## 2 Velký roub ks 5.0 TRUE ## 3 Malá matika 100 g 8.5 FALSE ## 4 Velká matka ks 6.0 TRUE 4.2.2 Funkce tibble Já radji pouívám funkce z ekosystému tidyverse, ve kterém funkci data.frame nahrazuje funkce tibble. Pouívá se úpln stejn, ale místo objektu tídy data frame vytvoí objekt tídy tibble, který je s data framem pln kompatibilní, ale o nco hezeji se vypisuje na konsoli. Píkaz s touto funkcí pak vypadá takto: library(tidyverse) sample_df &lt;- tibble( produkt = c(&quot;Malý roubek&quot;, &quot;Velký roub&quot;, &quot;Malá matika&quot;, &quot;Velká matka&quot;), jednotka = c(&quot;100 g&quot;, &quot;ks&quot;, &quot;100 g&quot;, &quot;ks&quot;), cena = c(10, 5, 8.5, 6), skladem = c(TRUE, TRUE, FALSE, TRUE) ) Povimnte si, e abych mohl funkci tibble pouít, musím nejdív naíst balíek tidyverse funkcí library. 4.2.3 Funkce tribble Oba výe popsané zpsoby zadávání dat do data framu mají jednu nevýhodu: data zapisujete po sloupcích, akoli je vtinou pirozenjí je psát po ádcích. Tuto nevýhodu eí funkce tribble, které je takté souástí ekosystému tidyverse. Pouívá se takto: sample_df &lt;- tribble( ~produkt, ~jednotka, ~cena, ~skladem, &quot;Malý roubek&quot;, &quot;100 g&quot;, 10, TRUE, &quot;Velký roub&quot;, &quot;ks&quot;, 5, TRUE, &quot;Malá matika&quot;, &quot;100 g&quot;, 8.5, FALSE, &quot;Velká matka&quot;, &quot;ks&quot;, 6, TRUE ) Názvy sloupc jsou v prvním ádku a kadý zaíná znakem ~. Pak následují jednotlivé ádky se hodnotami. Ve je navzájem oddleno árkou. Pokud chcete mít funkci tribble v njakém skriptu úhledn upravenou a dobe itelnou, mete pidat i mezery, nap. takto: sample_df &lt;- tribble( ~produkt, ~jednotka, ~cena, ~skladem, &quot;Malý roubek&quot;, &quot;100 g&quot;, 10, TRUE, &quot;Velký roub&quot;, &quot;ks&quot;, 5, TRUE, &quot;Malá matika&quot;, &quot;100 g&quot;, 8.5, FALSE, &quot;Velká matka&quot;, &quot;ks&quot;, 6, TRUE ) 4.2.4 Co kdy chci nco opravit? To je vechno moc hezké, íkáte si, ale v Excelu mohu nejen run zadat data, ale i kdykoli cokoli dodaten opravit. Jak to udlám v R? Inu, skoro stejn. V Excelu nco píete, pak máte u hotový výsledek a ten opravíte. V R nepíete rovnou výsledek, nýbr postup, jak výsledek vytvoit. Opravíte tedy postup, znovu ho spustíte a získáte opravený výsledek. Vypadá to o trochu sloitji, ale ve skutenosti je to o dost lepí, protoe informace o postupu zstane zaznamenaná. Pokud máte postup uloený ve skriptu, opravíte ho a znovu pusíte skript. Pokud máte postup v souboru rmarkdown (.Rmd), opravíte ho a znovu spustíte jen opravený blok. Pokud jste postup napsali jen do konzole, vrátité se k nmu v historii (v konsoli ipka nahoru, pípadn panel History v RStudiu), opravíte a znovu provedete. 4.2.5 Funkce edit Ve skutenosti mete i v R opravaovat data skoro stejn, jako v Excelu. Slouí k tomu funkce edit, která otvee jednoduchý tabulkový editor, do nj nate data frame uvedený v jejím arguentu, a kdy v editoru cokoli zmníte a pak ho zavete, vrátí zpátky opravená data. V následujícím píkladu vyvolám editor pro objekt sample_df a výsledek zapíu zpt do stejného objektu, take pak bude obsahovat ji opravená data. Tímto zpsobem se ale ztratí postup vzniku dat, a proto se v R skoro nepouívá. sample_df &lt;- edit(sample_df) 4.3 Chci si jen rychle nco vyzkouet V základním R i v nkterých balících je docela dost vzrových data set ji zabudovaných. Slouí jako píklady pro demonstraci nkterých postup a mete si s nimi zkusit hrát. asto se teba nco ukazuje na data setu iris, který obsahuje vlastnosti nkolika druh kosatc. head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa A v tidyverse ze zabudovaný i krásný data set postav ze Star Wars. head(starwars) ## # A tibble: 6 x 14 ## name height mass hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Sk~ 172 77 blond fair blue 19 male mascu~ ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu~ ## 3 R2-D2 96 32 &lt;NA&gt; white, bl~ red 33 none mascu~ ## 4 Darth V~ 202 136 none white yellow 41.9 male mascu~ ## 5 Leia Or~ 150 49 brown light brown 19 fema~ femin~ ## 6 Owen La~ 178 120 brown, grey light blue 52 male mascu~ ## # ... with 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt; Mimochodem, funkce head vrátí z data frame jen nkolik prvních ádk (zde 10, ale poet jde ovlivnit parametrem n). 4.4 Práce s CSV soubory V reálné praxi se data do R nejastjí naítají z CSV soubor. Abyste si mohli hned vyzkouet i v pípad, e zrovna nemáte ádný CSV po ruce, nejdív vám ukáu, jak do CSV zapisovat. 4.4.1 Funkce write_csv CSV soubor pro dalí pokusy vytvoím z data framu sample_df. S funcí write_csv z balíku readr (souást tidyverse) Je to takhle jednoduché: write_csv(sample_df, &quot;sample_df.csv&quot;) 4.4.2 Funkce read_csv Obdobn lze data z CSV souboru naíst funkcí read_csv: sample_df &lt;- read_csv(&quot;sample_df.csv&quot;) ## Rows: 4 Columns: 4 ## -- Column specification -------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (2): produkt, jednotka ## dbl (1): cena ## lgl (1): skladem ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. Vinte si, e funkce vypsala specifikaci sloupc a jejich datových typ. Datové typy odhaduje z obsahu souboru a ne vdy je trefí správn, take nkdy me být poteba je urit run, a u v parametrech funkce read_csv, nebo v dodatené úprav získaného data framu. 4.4.3 Interaktivní import dat v Rstudiu Pokud nevíte pesn, jak importovaný soubor vypadá, je v RStudiu nejjednoduí zvolit píkaz Import Dataset z menu File. Tam si pak mete na ivém náhledu dat vybrat, co pesn chcete importovat, které sloupce jsou kterého typu apod. Podstatné je, e se vám souasn generuje i skript, který si mete zkopírovat pro opakované pouití se stejným souborem. 4.4.4 Natení CSV z webu Funkcí read_csv a dalími funkcemi z balíku readr (souást tidyverse) mete naítat i vzdálené soubory z internetu. Místo cesty a názvu lokálního souboru pak zadáte jeho URL. Ukáu trochu komplexnjí píklad, který nate data z veejného datasetu zvíat k adopci praské ZOO. animals &lt;- read_delim( &quot;https://opendata.praha.eu/dataset/9e9ec749-db30-4f0d-bb02-5b48cf090888/resource/f4432746-002d-45dd-bb09-d1719acf35fb/download/959c0e6f-5afb-489f-95ef-c9c2982963de-adopcezvirata.csv&quot;, delim = &quot;;&quot;, col_types = cols( id = col_skip(), nazev_en = col_skip(), k_prohlidce = col_logical(), ...7 = col_skip() ), trim_ws = TRUE ) ## New names: ## * `` -&gt; ...7 ## Warning: One or more parsing issues, see `problems()` for details animals ## # A tibble: 514 x 4 ## nazev_cz trida_cz cena k_prohlidce ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 váb syivý Bezobratlí 1000 TRUE ## 2 Pakobylka okídlená Bezobratlí 1000 TRUE ## 3 Tayra Savci 5000 TRUE ## 4 Kajmanka supí Plazi 2000 TRUE ## 5 elva lutoelá Plazi 1000 TRUE ## 6 elva stepní (= typrstá) Plazi 1500 TRUE ## 7 elva sloní Plazi 5000 TRUE ## 8 elva obrovská Plazi 5000 TRUE ## 9 elva skalní Plazi 1000 TRUE ## 10 Leguán kubánský Plazi 3000 TRUE ## # ... with 504 more rows Co pesn jsem udlal? Protoe dataset oddluje sloupce stedníky a ne árkami, pouil jsem místo funkce read_csv obecnjí funkci read_delim, která umouje oddlova nastavit parametrem delim. V parametru col_types jsem funkcí cols uril, které sloupce nechci importovat (col_skip) a sloupci k_prohlídce jsem nastavil logický typ (v pvodních datech je hodnota 0 a 1). Parametrem trim_ws jsem uril, e se mají odstranit nevýznamné mezery na zaátku a konci hodnot. 4.5 Data na webové stránce Nakonec vám uká, jak snadno mete naítat data z webových stránek. Ukáu to na tabulce v HTML, se kterou se pracuje nejsnáz, ale jde to i se stránkami, kde jsou data uspoádaná jinak. Ideální tabulka je nap. na stránce Seznam hlavních mst stát svta ve Wikipedii. Natu ji skriptem, který: Pipojí balíek rvest pro stahování informací z webu. Do objektu hlavni_mesta piadí výsledek funkce html_table. Ta vrátí vechny HTML tabulky, které na stránce jsou. Jako parametr funkce html_table zavolá funkci read_html, která nate webovou stránku ze zadaného URL. Indexem [[1]] z vráceného seznamu tabulek vybere tu první. Zobrazím, co se do objektu hlavni_mesta uloilo. library(rvest) ## ## Attaching package: &#39;rvest&#39; ## The following object is masked from &#39;package:readr&#39;: ## ## guess_encoding hlavni_mesta &lt;- html_table( read_html( &quot;https://cs.wikipedia.org/wiki/Seznam_hlavn%C3%ADch_m%C4%9Bst_st%C3%A1t%C5%AF_sv%C4%9Bta&quot; ) )[[1]] hlavni_mesta ## # A tibble: 197 x 4 ## Stát `Hlavní msto` Svtadíl Obyvatel ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Afghánistán Afghánistán Kábul Asie 3 042 4~ ## 2 Albánie Albánie Tirana Evropa 600 339 ## 3 Alírsko Alírsko Alír Afrika 2 072 9~ ## 4 Andorra Andorra Andorra la Vella Evropa 22 884 ## 5 Angola Angola Luanda Afrika 2 776 1~ ## 6 Antigua a Barbuda Antigua a Barbuda Saint John&#39;s Amerika 25 150 ## 7 Argentina Argentina Buenos Aires Amerika 2 891 0~ ## 8 Arménie Arménie Jerevan Asie 1 093 4~ ## 9 Austrálie Austrálie Canberra Austrálie a Oc~ 332 798 ## 10 Ázerbájdán Ázerbájdán Baku Asie 2 100 0~ ## # ... with 187 more rows Asi jste si vimli, e získaná data nejsou perfektní. Ve sloupci stát je název kadá zem dvakrát. Je to proto, e ve zdrojové tabulce jsou ped názvem zem vlajky, které název obsahují v atributu alt. Navíc je poet obyvatel typu text, protoe si funkce neporadí s eskými mezerami mezi ády. Obojí jde snadno napravit. Ukáu vám jak, ale u to zatím nebudu podrobn vysvtlovat. To si necháme na jindy. mutate( hlavni_mesta, Stát = str_sub(Stát, 1, nchar(Stát) / 2), Obyvatel = as.double(str_remove_all(Obyvatel, &quot;\\\\s&quot;)) ) ## # A tibble: 197 x 4 ## Stát `Hlavní msto` Svtadíl Obyvatel ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Afghánistán Kábul Asie 3042430 ## 2 Albánie Tirana Evropa 600339 ## 3 Alírsko Alír Afrika 2072993 ## 4 Andorra Andorra la Vella Evropa 22884 ## 5 Angola Luanda Afrika 2776125 ## 6 Antigua a Barbuda Saint John&#39;s Amerika 25150 ## 7 Argentina Buenos Aires Amerika 2891082 ## 8 Arménie Jerevan Asie 1093499 ## 9 Austrálie Canberra Austrálie a Oceánie 332798 ## 10 Ázerbájdán Baku Asie 2100000 ## # ... with 187 more rows 4.6 Data z jiných zdroj Pomocí rzných balík jde naítat data i z jich typ zdroj. Já teba neastji pracuji s daty Google Search Console nebo Google Analytics, která naítám pes API (aplikaní rozhraní) resp. prostednictvím specializovaných balík, které toto API zpístupují. Pracovat jde i s daty ve vech bných SQL i NoSQL databázích. Tyto metody jsou u ale nad rámec tohoto lánku. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
