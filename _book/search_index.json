[["index.html", "Od Excelu k R O knize eho chci spolu s vámi dosáhnout Zptná vazba O autorovi", " Od Excelu k R Marek Prokop, PROKOP software s.r.o. 1. vydání: 24. 3. 2022, poslední aktualizace: 30.3.2022 O knize Tuto knihu i spíe sérii lánk a návod jsem napsal pedevím pro své klienty, které uím vyuívat R v marketingu. Pokud k nim patíte, mám radost, e jste kníku oteveli a chcete se pustit do studia. A spolu budeme analyzovat klíová slova, výsledky SEO nebo chování vaich zákazník, vyuijete ve, co se zde nauíte. Ale teba mými klienty nejste. Nevadí. Kdy u jsem knihu napsal, byla by koda, kdyby neslouila i vám. Základy, které zde vykládám, se vám budou hodit skoro v kadém oboru, na který se R chystáte aplikovat. Ukáu vám vci, které asi bn dláte v Excelu a v R jdou udlat hodn podobn. A nauím vás i vci, které taky dláte v Excelu, ale v R jdou udlat o dost lépe. U jen to se vám nejspí vyplatí. A nkdy pozdji, a budete mít základy v malíku, vám teba ukáu i to, co dlám v R jako markeák a Excel by mi na to rozhodn nestail. eho chci spolu s vámi dosáhnout Mám jednoduchý cíl: pedpokládám, e umíte docela slun Excel nebo jiný spreadsheet, teba Google Sheets. Nepedpokládám, e umíte cokoli jiného, nap. programovat. Z toho jsem pi psaní vycházel a snaím se toho dsledn dret. Výklad by tedy ml být srozumitelný i neajákm a programátoi nebo kodéi se u nj mohou nudit. Na druhou stranu od vás ekám zvídavost a chu se uit. Nedlejte jen to, co vám eknu. Experimentujte, dohledávejte si dalí informace na webu, studujte R z více zdroj souasn. Na dleité zdroje vás budu prbn odkazovat. Na kapitoly pohlíejte jako na navazující lekce. Procházejte je jednu za druhou a ihned si zkouejte vechny píklady. Zptná vazba Budu moc rád, kdy m upozorníte na chyby a nedostatky. Nco vám nefunguje, nebo jste nco nepochopili a lo by to vysvtlit lépe? Napite mi prosím. Ideáln jako issue na Githubu, nebo e-mailem na mprokop@prokopsw.cz. Dkuju! Mimochodem, napsat mi mete i v pípad, e potebujete s R pomoci ve firm a za pomoc mi chcete nco zaplatit. ivím se mj. mentoringem firemních tým zamených na digitální marketing nebo webovou analytiku. O autorovi Aby nedolo k mýlce, nejsem expert na R. Zaal jsem se ho uit asi ped pti lety a poád ho moc neumím. Tím spí mám ale jet v hlav, co mi v zaátcích nejvíc chyblo a co jsem se uil z pohledu praxe zbyten brzo. A se vám studium daí! Marek Prokop, Praha, bezen 2022 "],["proc-r.html", "1 Pro jsem vymnil Excel za R 1.1 Co je R a RStudio 1.2 Pro koho je R vhodné 1.3 Kdo by se do R rozhodn neml poutt 1.4 Co vám R ve srovnání s Excelem pinese 1.5 Pro zrovna R a ne teba Python", " 1 Pro jsem vymnil Excel za R Spreadsheety pouívám od konce 80. let prakticky denn. Multiplan, Supercalc, Quatro, Lotus, Excel, Google Sheets. Jsou bájené, miluju je, ale nkolik posledních let po nich sahám u jen párkrát do msíce. Vtinu asu toti pouívám R a RStudio. Je to dáno nároky mé práce, vyí efektivitou a taky tím, e m R víc baví. Moná jste na tom podobn jako já a R pro vás bude taky vhodnjí. A moná nebude. Máte mu dát anci? Zlepí vá pracovní ivot, nebo to bude ztracený as? Zkusím vám pomoci, abyste se rozhodli správn. 1.1 Co je R a RStudio R je programovací jazyk (to zní stran, co?) navrený pro statistiku. Tradin se pouívá pro zpracování dat z medicinských i vdeckých výzkum, ale ím dál astji po nm sahají i datoví analytici z byznysu. Zárove je to interaktivní prostedí vhodné pro rychlé ad hoc výpoty a také je to ekosystém desítek tisíc knihoven (íká se jim balíky), které pomáhají eit nejrznjí úkoly snad ze vech obor lidské innosti. Samotné R u ale pouívá málokdo. Vtina uivatel pracuje v RStudiu, co je integrované vývojové prostedí (IDE, Integrated Development Environment), které umouje mnohem pohodlnjí a efektivnjí práci ne základní prostedí R. Podstatné je, e R (i RStudio) vymýleli a poád jet vymýlejí statistici, vdci, analytici, nikoli programátoi. Obecn je proto blií spí neprogramátorm, nap. tím, e má pímo v sob zabudovanou velmi podrobnou a snadno dostupnou nápovdu. Ve vtin programovacích jazycích se programuje, ale R se spí pouívá. Jako Excel :-) 1.2 Pro koho je R vhodné U jsem íkal, e R tradin pouívají lékai, biologové a jiní vdci, nap. k tomu, aby na základ experiment vyhodnotili, který lék je jak úinný, nebo co ovlivuje vznik rakoviny. Viml jsem si také, e je R docela populární ve financích, nap. pro výpoty investic nebo pojistných rizik. Já ale vdec, léka ani banké nejsem, take budu mluvit spí o svém oboru, co je marketing. V marketingu se R velmi dobe hodí nap. k vyhodnocování A/B test, pro zákaznickou analytiku (pro nkteí zákaznici nakupují víc a jiní mí), analýzy prodeje, návtvnosti, nebo teba PPC (pay per click reklama) a SEO (optimalizace pro vyhledavae). Je to i brána do svta strojového uení, které jde aplikovat nap. na analýzu on-line obsahu nebo vazeb v sociálních sítích. Jiná otázka je, pro koho je R vhodné z pohledu profesních a osobnostních pedpoklad. Kdy to posuzuju podle sebe a dalích, které jsem v téhle souvislosti potkal, R sedne: analytickým typm, pro které je Excel základ, ale trápí je jeho omezení, lidem, kteí si rádi lámou hlavu víc ne ostatní, rádi se uí a hledají nové cesty, lidem, kteí se nebojí neho, co vypadá jako programování, nebo u mají s kódováním i skriptováním urité zkuenosti. 1.3 Kdo by se do R rozhodn neml poutt Asi je hloupost se do R poutt, pokud ho k niemu nepotebujete. Pouíváte Excel, pracujete v nm rychle a efektivn a nikdy jste nenarazili na nic, co by neuml? Pak R nejspí nepotebujete. Kdy slyíte slova jako programování, kódování, skripty nebo programovací jazyk, dostáváte vyráku a zane vás bolet hlava? Pak pro vás R taky nebude. Nebo naopak bravurn programujete v Pythonu a jste s ním pro své datov-analytické poteby naprosto spokojeni? Ani pak R spí nevyuijete. Do R se radji nepoutjte ani v pípad, e neumíte alespo pasivn anglicky. Anglických zdroj je na webu bambilion, ale eských jen pár. 1.4 Co vám R ve srovnání s Excelem pinese Strun: rychlost, efektivitu, více moností, eleganci. A zárove trochu trápení pi studiu. Jde to íct i konkrétnji: Na velmi jednoduché ad hoc (neopakované) úlohy nepinese R nic. Kdy si chci udlat rychlý rozpoet narozeninové oslavy, vezmu si na to Google Sheets a ne R. Pokud budu chtít z firemní databáze vytáhnout, které zboí se nejvíc prodává nap. podle roní doby, mohu to udlat v Excelu i v R. Vyberu si ale R, protoe to udlám rychleji, elegantnji a postup pjde snáz kdykoli zopakovat s erstvými daty. Na obsahovou analýzu tweet konkurence si vezmu urit R, protoe to by Excel vbec nezvládl. Speciálními výhodami R pak je R Markdown a Shiny. Tím prvním jdou dlat znovupouitelné, automatické, moc hezky vypadající reporty, které ocení kadý, kdo pracuje pro klienty nebo pro nároného éfa. Ostatn i tato kniha je napsaná v R Markdownu. To druhé slouí k tvorb interaktivních webových aplikací, které zpracují nejrznjí data a úhledn zobrazí výsledek. 1.5 Pro zrovna R a ne teba Python Kdy se chcete pustit do datové analytiky a udláte si rychlou reeri, co byste se mli nauit, vypadne na vás R nebo Python. Tyhle dva jazyky se na data pouívají nejvíc a u dlouho spolu v popularit soupeí. Strun eeno, jsou mezi nimi tyto rozdíly: Python je z programátorského hlediska hezí jazyk a programátorm sedne lépe. R je naopak vhodnjí pro neprogramátory. Python je o nco lépe vybavený pro strojové uení, NLP (zpracování pirozeného jazyka), automatizaci a software v bné produkci. R je naopak o nco lepí na interaktivní práci nebo ad hoc úlohy, ve kterých pedem úpln nevíte, eho pesn chcete dosáhnout. Python je univerzální jazyk a mete si v nm naprogramovat teba e-shop. To by v R asi nelo, by základní obsahové weby zvládne taky. R má (zatím) rozvinutjí ekosystém knihoven. Google Analytics, Search Console, Google Drive nebo Google Sheets  nic není problém, to ve u je v R dávno vyeené. Kdy jsem tohle psal (bezen 2022), evidoval oficiální repozitá CRAN 18 910 eRkových balík snad na úpln vechno. "],["instalace-a-nastaveni.html", "2 Instalace a nastavení 2.1 Cloud nebo instalace 2.2 Instalace R 2.3 Instalace RStudia 2.4 Pokud u R a RStudio máte (a trochu znáte) 2.5 Nastavení RStudia 2.6 Instalace balík 2.7 Projekty", " 2 Instalace a nastavení Potebujete dv vci: samotné R, které je hodn spartánské a pracuje se v nm blb, a RStudio, které je naopak super komfortní a kdy ho máte, do základního R u nikdy nevlezete. 2.1 Cloud nebo instalace Dobrá zpráva: pokud nechcete, nic si instalovat nemusíte. Pro první pokusy i pro vánjí práci mete pouít RStudio.cloud, které bí v prohlíei. ivot s ním budete mít o dost jednoduí, ale penenku o nco prázdnjí. RStudio.cloud sice má variantu zdarma, ale v té mete pracovat maximáln 15 hodin msín (za 5 USD 50 hodin msín) a dostanete jen 1 GB RAM a 1 CPU, co není mnoho. Pouitelná verze vás pak bude stát od 25 USD (small business) a dostanete 160 hodin msín, a 8 GB RAM a a 4 CPU. Hodiny se ale násobí potem CPU a velikostí RAM. Jestli v cloudu pracovat nechcete, musíte nainstalovat jednak R a jednak RStudio. Obojí je snadné a zdarma. Pro vánjí práci budete asem potebovat jet Git. Ten je taky zdarma, ale rozchodit ho nemusí být úpln triviální. Moje doporuení: jestli chcete R jen nezávazn vyzkouet, zvolte cloud. Instalovat mete kdykoli pozdji. 2.2 Instalace R Stáhnte a nainstalujte si zkompilovanou verzi R pro svj operaní sytém z https://cloud.r-project.org/. ádná past by tam být nemla, postupujte podle instrukcí na webu a v instalátoru. Kdy po instalaci R spustíte, mlo by vypadat njak takhle: Okno zavete a to je vechno. Odte mete na základní R zapomenout. 2.3 Instalace RStudia Stáhnte a nainstalujte si RStudio Desktop Free z https://www.rstudio.com/products/rstudio/download/. I to by mlo jít bez problém a sputné RStudio pak bude vypadat njak takto: 2.4 Pokud u R a RStudio máte (a trochu znáte) Pro jistotu si zkontrolujte verzi RStudia i R. Verzi R vám ekne konzole pi sputní a kdykoli pozdji ji zjistíte píkazem: R.version.string ## [1] &quot;R version 4.1.2 (2021-11-01)&quot; Poslední verze (zjistíte na webu R) je nejlepí, ale kdy budete o pár desetinek pozadu, nic váného se nestane. On je upgrade R malinko opruz, take ho nechcete dlat zbyten. Rozhodn si ale aktualizujte nainstalované balíky, protoe to jde snadno píkazem: update.packages(ask = FALSE, checkBuilt = TRUE) Pokud byste mli starou verzi RStudia, jde ho normáln peinstalovat. 2.5 Nastavení RStudia R i RStudio je ve výchozím stavu nastaveno v zásad dobe. Zmte prosím jen dv vci. Z menu Tools vyberte píkaz Global Options (úpln na konci) a v následujícím dialogu vypnte volbu Restore .RData into workspace at startup a volbu Save workspace to .RData on exit nastavte na Never. Tím zaruíte, e RStudio nastartuje vdy isté, bez objekt z pedelé práce, které jsou astou píinou chyb. A pak na panelu Code zapnte volbu Use native pipe operator. To sice není nutné, ale ve se pak bude chovat stejn, jako v mých ukázkách. 2.6 Instalace balík Základní R je jenom jazykové jádro s nezbytnými píkazy a funkcemi. Jeho funknost roziují tzv. balíky (packages), kterým se v jiných programovacích jazycích asto íká knihovny. Balíky je poteba jednak nainstalovat (jednorázov) a jednak pipojit ped konkrétní prací, ke které je potebujete (vysvtlím pozdji). V RStudiu Desktop u jsou nkteré balíky pedinstalované a jet víc jich je v cloudovém RStudio, ale pro jistotu vám ukáu, jak nainstalujete ty, které budete potebovat pro celý tenhle seriál. Z menu Tools zvolte píkaz Install Packages. Objeví se tento dialog: Nechte v nm pedvyplnné volby a do prázdného políka vlote tento seznam balík: janitor, knitr, lubridate, rmarkdown, readxl, rvest, tidyverse Alternativn jde balíky instalovat funkcí install.packages(), kterou zavoláte teba z konzole (vysvtlím za chvíli). To pak vypadá takhle: install.packages(c(&quot;janitor&quot;, &quot;knitr&quot;, &quot;lubridate&quot;, &quot;rmarkdown&quot;, &quot;readxl&quot;, &quot;rvest&quot;, &quot;tidyverse&quot;)) Oba zpsoby balíky zárove aktualizují, co se obas hodí. 2.7 Projekty V RStudiu se nejastji pracuje v tzv. projektech. Jde to sice i bez nich, ale projekty jsou praktické, protoe si pamatují rzná nastavení, poslední otevené soubory, historii píkaz apod. Na vaem poítai jeden projekt vdy odpovídá jedné sloce (s pípadnými podslokami), do které si RStudio uloí projektový soubor nazev-projektu.Rproj. Tímto souborem jde pak projekt otevít nap. z Przkumníka Windows. 2.7.1 Zalote si cviný projekt Tohle fakt hned te udlejte. Je to dleité. Po sputní RStudia zvolte píkaz New Project z menu File, nebo z roletky projekt vpravo nahoe. Na dalí obrazovce zvolte New Directory. Na dalí New Project. A nakonec zadejte název sloky, ve které se má projekt vytvoit. Me to být výchozí (domovská) sloka pro R (~/R) nebo jakákoli jiná, kterou si vytvoíte jako nadízenou sloku pro podloky eRkových projekt. Teba u m to je c:/dev/R (pro moje projekty), nebo c:/dev/R/clients (pro klientské projekty). K projektm jet pár doporuení a vysvtlení: V nkterých situacích vám zjednoduí ivot, kdy budete projekty pojmenovávat podobn jako webová URL, tj. jen písmeny malé anglické abecedy, ísly, pomlkami a tekami. Nutné to ale není. Po standardní instalaci vám na Windows (jinde to me být jiné) ve sloce Dokumenty vznikne podsloka R, kterou pak RStudio (i samotné R) oznauje aliasem ~/R. Projekty ale mete zakládat i jinde. A u si projekt zaloíte kdekoli, doporuuji si pro vechny projekty zvolit jedinou zasteující sloku, protoe v rzných kontextech se vám pak zobrazí jen název projektu, a pokud byste na více místech mli stejn pojmenované projekty, pletlo by vás to. Pokud máte nebo a budete mít zprovoznný Git, objeví se vám pi volb sloky i volba Create a git repository. Vdycky ji zapínejte. Pro první pokusy ale Git nepotebujete a já se mu v této kníce vnovat nebudu. "],["prvni-kroky.html", "3 První kroky v R a RStudiu 3.1 Excel vs. R 3.2 Ti zpsoby práce s R 3.3 Interaktivní práce s konzolí 3.4 Práce se skripty 3.5 R Markdown 3.6 Z téhle kapitoly si pamatujte", " 3 První kroky v R a RStudiu Nebudu vám tajit, e se zpsob práce v R od Excelu na první pohled dost lií. Excel vám naservíruje pipravený rastr bunk, do kterých mete rovnou psát hodnoty a vzorce. V R naopak zaínáte s prázdnou plochou, a co si sami neudláte, to nemáte. 3.1 Excel vs. R Kdy chcete v Excelu seíst dv ísla ve dvou rzných bukách, nejprve je do tch bunk napíete. Nap. íslo 10 do buky A1 a íslo 20 do buky B1. Do buky C1 pak mete dát vzorec =A1+B1, který ísla sete. V R to udláte podobn jen musíte napsat kód, který buky\" (v R se jim íká objekty) zaloí a pak sete. Ten kód me vypadat teba takhle: prvni_cislo &lt;- 10 druhe_cislo &lt;- 20 prvni_cislo + druhe_cislo ## [1] 30 Pípadn mete, stejn jako v Excelu, dv ísla rovnou seíst: 10 + 20 ## [1] 30 A nebo výsledek uloit do jiné buky\" (objektu): prvni_cislo &lt;- 10 druhe_cislo &lt;- 20 vysledek &lt;- prvni_cislo + druhe_cislo a tu si pak zobrazit: vysledek ## [1] 30 Ve skutenosti je to o dost pestejí. Mete jedním vzorcem\" (v R se tomu íká výraz nebo píkaz) zpracovat celou adu nebo tabulku rzných hodnot a výsledek zobrazit mnoha zpsoby  jako tabulku, formátovaný text, graf. To ve se v této kníce nauíte. 3.2 Ti zpsoby práce s R S R jde pracovat více rznými zpsoby. Já nejastji pouívám ti: Interaktivní práce v konzoli. Polointeraktivní práce se skriptem. Interaktivní, poloautomatická i zcela automatická tvorba dokumentu v R Markdownu. Vechny ti ukáu na jednoduchém píkladu: pedstavte si, e jste dnes ve svém obchod vydali 100 útenek. Te se chcete rychle dozvdt, kolik dlá celková trba a jaká byla typická útrata jednoho zákazníka. 3.3 Interaktivní práce s konzolí Vae RStudio vypadá njak takhle a konzole je ta velká plocha vlevo. Psát budete za zobáek úpln vlevo (jinam ani nejde umístit kursor), kadý ádek vdy odentrujete a konzole vám vtinou njak odpoví. Nejprve si vygenerujte útenky. Budou sice trochu falené, ale to nevadí. Do konzole napite: cena &lt;- round(rnorm(n = 100, mean = 1000, sd = 200), digits = 2) Odentrujte a nic se nestane. Vlastn stane. Pokud se podíváte doprava na záloku Environment, uvidíte tam tohle: Píkazem jste toti vytvoili v prostedí R (environment) nový objekt cena a uloili jste do nj sto (skoro) náhodných ísel. Na vechny se mete podívat píkazem: cena ## [1] 1239.31 1266.84 1191.97 1274.27 1127.21 1014.99 998.29 776.95 1096.38 ## [10] 1075.64 896.18 1368.37 975.05 1098.43 1112.29 1395.84 662.73 959.34 ## [19] 919.91 1386.32 630.80 1122.25 1024.88 1151.69 701.04 861.63 1107.25 ## [28] 901.18 1078.30 741.86 1028.21 1339.58 1081.39 1244.47 853.30 1183.85 ## [37] 1045.43 1145.55 788.07 879.57 1008.77 1159.16 801.05 1025.00 1095.06 ## [46] 1214.84 1075.35 1144.89 1069.41 1014.75 1172.26 1186.07 1098.66 738.63 ## [55] 591.21 807.90 996.19 683.87 976.16 1366.79 1105.61 672.16 733.30 ## [64] 1187.42 1110.30 1324.93 959.97 1026.89 918.17 847.18 952.72 910.23 ## [73] 883.24 855.36 995.24 787.25 1235.31 600.64 1096.83 780.42 1144.38 ## [82] 1014.12 721.06 1020.61 1107.63 931.51 1210.68 728.93 1208.44 818.08 ## [91] 1284.66 1106.24 1320.46 1336.84 682.28 1317.25 955.23 1234.54 860.97 ## [100] 1411.76 co pak na konzoli vypadá njak takhle (ísla jsou náhodná, take nesedí s pedelým výsledkem): Te vám to ale musím vysvtlit trochu podrobnji. 3.3.1 Objekty (promnné) Objekt jazyka R se chová podobn jako promnná v jiných programovacích jazycích. Je to vlastn takový uplík, do kterého si mete ukládat nejrznjí hodnoty: ísla, textové etzce, logické hodnoty (TRUE a FALSE ili pravda a nepravda) apod. Oproti jiným programovacím jazykm je tu pár zvlátností: Do objekt se hodnoty piazují operátorem &lt;-. Ten mete vloit i klávesovou zkratkou Alt+- (Alt pomlka). Bné objekty R jsou ve skutenosti vektory. V jiných programovacích jazycích tomu obvykle odpovídá jednorozmrné pole. V praxi to znamená, e v íselném objektu nemusí být jen jedno íslo, ale me jich tam být moc. V naem píkladu jich je sto. R s vektory automaticky i poítá. K vektoru pti ísel tedy mete piíst jedno íslo (ve skutenosti vektor s jedním íslem) a ono se automaticky pite ke vem pti. Pozdji na to ukáu dalí píklady. Kde se vám tam tch sto ísel vzalo? Získali jste je funkcemi rnorm a round. 3.3.2 Funkce Pouka praví: kdy to existuje, je to objekt, a kdy to nco dlá, je to funkce. Mete to brát i tak, e funkce je vechno, co má za svým jménem kulaté závorky. V závorkách mohou být tzv. parametry (nkdy se jim íká argumenty; je to toté), ili vstupní data, která chcete funkci pedat. Funkce tyto parametry zpracuje a vrátí výsledek. Vlastn úpln stejn, jako funkce v Excelu. U názv objekt i funkcí záleí na velikosti písmen. Cena je nco jiného ne cena, tak pozor na to. rnorm je funkce, která vrací (skoro) náhodná ísla. Skoro jsem dal do závorky, protoe vrácená ísla jsou náhodná v rámci normálního rozdlení (to je ta slavná Gaussova kivka), jeho podobu uríte parametry mean (prmr) a sd (smrodatná odchylka neboli standard deviation). Parametrem n navíc musíte urit, kolik tch ísel vlastn chcete. Následující píkaz tedy vrátí vektor sta náhodných ísel z normální rozdlení s prmrem 1000 a smrodatnou odchylkou 200. rnorm(n = 100, mean = 1000, sd = 200) ## [1] 909.1434 890.0451 974.6006 1231.7046 909.2660 1138.1659 1153.9782 ## [8] 918.0514 1094.7529 1048.2780 1330.8159 1241.5500 1278.9101 867.8736 ## [15] 726.1279 1366.2103 907.1882 864.7661 1257.8359 667.4297 819.2745 ## [22] 753.5340 938.9616 882.3901 1106.5000 929.6607 995.1292 983.8704 ## [29] 1332.0322 1162.0321 1254.2200 828.0030 787.4491 984.2852 960.6062 ## [36] 1092.1243 770.0150 1225.4347 1007.7385 807.1331 1445.2737 1194.9800 ## [43] 1197.1358 1335.8005 1334.0482 628.4970 1180.2140 964.4305 1059.8414 ## [50] 1196.4914 1113.7743 802.1997 836.2924 990.2959 972.1000 865.9738 ## [57] 547.3280 1057.8411 1100.0308 1274.6802 1069.1393 1088.2410 1038.2238 ## [64] 1322.2967 1129.4611 904.9532 1010.6262 921.6413 817.3809 1194.8500 ## [71] 1093.9204 942.1813 986.7207 873.6372 950.6691 910.6246 892.0747 ## [78] 1116.9015 1046.3173 1241.5313 1389.6883 642.7597 647.9661 707.3055 ## [85] 878.6477 891.1307 975.6938 906.7344 757.1774 662.3011 955.3331 ## [92] 924.4538 1027.7298 1225.7654 815.1516 753.6022 926.3888 1256.1001 ## [99] 1315.1818 854.0904 Klidn si ho zadejte párkrát do konzole s rznými parametry, abyste vidli, jak se mní výsledek. round je funkce, která zaokrouhluje. První parametr je íselný vektor, který se má zaokrouhlit, a druhý parametr digits uruje, na kolik desetinných míst se má zaokrouhlit. Následující píkaz tedy zaokrouhlí íslo 1.145 na dv desetinná místa: round(1.145, digits = 2) ## [1] 1.15 První parametr funkce round se jmenuje x, ale první parametr funkce se asto píe bez jména, protoe jeho poadí nejde poplést. Kadopádn ale me napsat volání funkce i takto a výsledek bude stejný: round(x = 1.145, digits = 2) ## [1] 1.15 A te u asi chápete  funkce rnorm vrátí sto ísel s hodn desetinnými ísly, a proto jste její výsledek jet poslali funkci round, která celý vektor (tj. vech sto ísel) zaokrouhlila na dv desetinná místa. V jiném programovacím jazyce byste na to potebovali dost sloité výpoty v cyklech, v R staí tohle: round(rnorm(n = 100, mean = 1000, sd = 200), digits = 2) ## [1] 883.95 814.92 936.47 1205.64 927.45 837.03 511.04 1038.08 881.30 ## [10] 1166.68 1067.08 902.29 1185.60 1032.26 772.27 1185.80 927.40 589.34 ## [19] 1105.48 862.92 1186.52 1006.75 1018.34 1438.13 989.14 1097.41 749.19 ## [28] 885.98 1137.54 877.39 1011.25 1071.58 1043.04 881.49 936.43 1172.51 ## [37] 1018.06 1117.41 951.41 933.39 1444.45 790.97 1183.44 1162.77 1114.17 ## [46] 1075.67 953.74 1251.14 1025.99 1020.22 994.59 957.56 926.91 918.35 ## [55] 842.03 1154.36 1219.46 1193.34 641.45 1135.89 1165.24 1091.03 739.91 ## [64] 1100.86 1329.05 513.20 1138.81 949.67 1311.42 1133.79 940.30 1251.53 ## [73] 807.60 945.69 799.95 740.92 1118.10 937.65 1154.24 1275.08 1046.93 ## [82] 1027.01 1102.55 1147.01 1046.72 1089.85 1319.42 826.70 1001.32 987.20 ## [91] 975.57 973.06 1079.42 825.79 895.35 824.95 1350.53 854.65 1032.25 ## [100] 760.49 Mimochodem, vimli jste si v pedelých píkladech tch ísel v hranatých závorkách? Protoe se v píkladech vypisují jako výsledky vektory (vechny základní, tzv. atomické typy jsou v R vektory), R vám tmi ísly v hranatých závorkách íká, na jaké pozici ve vektoru daná hodnota je. A hranaté závorky jdou i pouít pro adresování konkrétního prvku vektoru. Teba tohle zobrazí z vytvoeného vektoru cena jenom pátý prvek: cena[5] ## [1] 1127.21 a tohle pátý a desátý: cena[5:10] ## [1] 1127.21 1014.99 998.29 776.95 1096.38 1075.64 Chtli jsme jet útenky seíst, e? Je to hraka: sum(cena) ## [1] 102371.5 Zajímá vás, kolik dlá celková trba bez DPH? sum(cena / 121 * 100) ## [1] 84604.52 pípadn: sum(cena) / 121 * 100 ## [1] 84604.52 Obojí by vám mlo dát stejný výsledek. V prvním pípad se ale nejprve vydlí kadý jednotlivý prvek vektoru a pak se celý vektor sete, kdeto v druhém pípad se celý vektor nejprve sete a pak teprve vydlí. Zajímá vás rozloení ceny zobrazené v histogramu? hist(cena) Zobrazí se vám na panelu Plot vpravo (vá bude vypadat trochu jinak). Tím jste poznali dalí dv funkce (sum a hist). Za chvíli vám ukáu, jak toté udlat skriptem a v R Markdownu, ale nejdív pár slov k nápovd. 3.3.3 Integrovaná nápovda R má pímo v sob zabudovanou nápovdu ke kadé funkci. Ta se projevuje jednak tím, e kdy zanete psát název funkce, po pár znacích se zanou nabízet funkce, jejich název tmi znaky zaíná a v bublin se objeví struný popis. Tuto nápovdu lze pípadn vynutit klávesovou kombinací Ctrl+Space. Pokud máte funkci napsanou i se závorkami, Ctrl+Space vám napoví moné parametry. Mete té na konzoli zadat píkaz tvoený otazníkem a názvem funkce, nap. ?rnorm, a pak se vám oteve kompletní nápovda na panelu Help vpravo. A konen mete s kurzorem na názvu funkce stisknout F1 a dostanete opt kompletní nápovdu v panelu Help. Pi práci s R tedy nemusíte skoro googlit. Staí si pamatovat alespo pibliné názvy funkcí. 3.4 Práce se skripty Práce v konzoli je sice flexibilní, ale na víc ne pár píkaz dost nepraktická. Kdy udláte chybu, mete se sice ipkami nahoru a dol pohybovat po historii píkaz a opravovat je, ale není to ono. Chyby se mnohem lépe opravují ve skriptech. Z menu File  New File vyberte R Script a vlevo nahoe se vám oteve editor skript. Do nj si vlote vechny píkazy, které jste pedtím zadali postupn do konzole. Nemusíte to ale dlat run  podívejte se vpravo na záloku History a vida, jsou tam, e? Vyberte ty správné a tlaítkem To Source je pesute do skriptu. Okno RStudia by pak mlo vypadat njak takto: Kdy nyní na kterémkoli ádku stisknete Ctrl+Enter, celý ádek se vykoná stejn, jako kdybyste ho zadali na konzoli. Mete i klávesou Shift vybrat víc ádk a pak se po Ctrl+Enter vykonají vechny. A konen mete tlaítkem Source z toolbaru nad editorem vykonat celý skript. Po vykonání celého skriptu by mlo okno RStudia vypadat njak takto: Nezapomete si ale celý skript uloit pod njakým vhodným jménem (teba prvni-skript). Ml by se vám uloit do sloky projektu a ke jménu se automaticky pipojí pípona R. 3.4.1 Úprava skriptu Hlavní výhoda skriptu spoívá v tom, e jde snadno upravit a pak celý znovu spustit. Vyzkouejte si to. Hned v prvním ádku zmte rnorm za runif a odstrate této funkci parametry mean a sd, take zbude jen:. cena &lt;- round(runif(n = 100), digits = 2) Kdy te celý skript znovu spustíte píkazem Source (nebo klávesovou zkratkou Ctrl+Shift+S), poznáte, co se zmnilo? hist(cena) Ano, zmnil se histogram. Funkce rnorm toti vybírá náhodná ísla z normálního rozloení (random normal distribution) a histogram má proto tvar známe gaussovy kivky  ísla blíe prmru se vyskytnou pravdpodobnji ne ísla dál od prmru. Funkce runif (random uniform distribution) naproti tomu vybírá náhodná ísla z rovnomrného rozdlení, take pravdpodobnost zastoupení vech ísel mezi nulou a jednou je stejná. 3.5 R Markdown Skripty jsou praktické, ale mají dv nevýhody: Kdy nechcete provést celý skript najednou, patn se v nich hledá ást, kterou chcete spustit. Výstup není moc pehledný a je rozdlený na víc míst: textový výstup se ne moc hezky zobrazí v konzoli a grafy na panelu Plots. Ob tyto nevýhody odstrauje R Markdown. 3.5.1 Co je R Markdown 3.5.1.1 Základní Markdown Samotný Markdown moná znáte. Je to jednoduchý znakovací jazyk, kterým jdou v ist textovém formátu vyznait základní strukturální a formátovací prvky  nadpisy, odstavce, odráky, odkazy, tuný text apod. Z toho pak jde vygenerovat výstupy v rzných formátech: nejastji v HTML, ale klidn i PDF, Word atd. Text v Markdownu vypadá nap. takto: # Tohle je nadpis 1. úrovn Tohle je bný odstavec. Víc odstavc je od sebe oddleno dvma Entry ili prázdným ádkem. ## Tohle je nadpis 2. úrovn Tohle je píklad [odkazu v textu](https://example.com). A tohle je píklad odráek: - první odráka, - druhá odráka, - tetí odráka. Jdou udlat i íslované body, které se automaticky oíslují podle poadí: 1. První bod. 1. Druhý bod. 1. Poslední bod. Jak vidíte, docela dobe se píe a dobe se i te, i kdy není pevedený (vyrenderovaný) do HTML. Ale kdy se pevede, je výsledek docela hezký: 3.5.1.2 R Markdown R Mardown je Markdown, do kterého jsou zamíchané kusy eRkového kódu. Vypadá njak takhle: Vyzkouejte si nyní R Markdown sami. Nejprve si zalote nový soubor: Z menu File  New File vyberte R Notebook. Objeví se vám editor s pedvyplnným vzorovým obsahem. Ten celý zrute (Ctrl+A, Del) a zkopírujte do nj tohle: --- title: &quot;Mj první R Notebook&quot; output: html_notebook --- Toto je píklad [R Markdown](http://rmarkdown.rstudio.com) zápisníku (notebook). Zaíná nahoe metadaty, které zde udávají jen titulek a formát výstupu. Metadata jsou ohraniena ádky tvoenými temi pomlkami. Pak následuje normální Markdown. Za tímto odstavcem je blok eRkového kódu, kterému se íká *chunk* a já mu budu íkat *blok*. ```{r} cena &lt;- round(rnorm(n = 100, mean = 1000, sd = 200), digits = 2) sum(cena) ``` Pokud blok spustíte zelenou ipekou na jeho pravém horním okraji nebo klávesovou zkratkou Ctrl+Shift+Enter, provede se a zobrazí výstup pímo pod sebou. Výsledek bude vypadat jako na pedelém obrázku. Nyní mete podle instrukcí vykonat jediný blok kódu, který tam zatím máte, a pod blokem se vám zobrazí souet ceny. A mete i celý soubor pevést do HTML a prohlédnout si ho v celé kráse. Udláte to píkazem Preview z toolbaru nad editorem, ale ped tím jet musíte soubor uloit, teba pod jménem prvni-notebook. Ke jménu se automaticky pipojí pípona Rmd. Celý výsledek se zobrazí v panelu Viewer vpravo: U jste pochopili, v em jsem napsal tuhle kníku? Ano, v RStudiu v R Markdownu :-) Ze vech tí zpsob pouívání R (konzole, skripty, R Markdown) pouívám R Markdown pro bné analýzy nejastji. Píu si v nm postup, eRkový kód i pouení z výsledk. Kdy se pak pozdji k analýze vrátím, teba proto, e chci pro jiného klienta udlat podobnou, krásn vidím, jak jsem postupoval a co a pro jsem udlal. U tohle je pro m obrovská výhoda oproti excelové tabulce, ve které se u po pár týdnech nevyznám a musím znovu pracn zkoumat, co tam je, pro to tam a jak to vlastn funguje. A toté doporuuji i vám: klidn pro te zapomete, e konzole a skripty vbec existují, a pouívejte na vechno R Markdown. 3.6 Z téhle kapitoly si pamatujte 3.6.1 R Markdown Zvyknte si na R Markdown jako základní zpsob práce s R. Konzole se hodí pro pár pomocných píkaz, nebo abyste si vyzkoueli, jak která funkce funguje. Skripty se hodí pro dávkové zpracování bez interaktivity, kdy pesn víte, co a jak chcete udlat. Také se jimi definují nové funkce a píou balíky. Pro vechno ostatní je tu R Markdown. Kdy si budete cokoli z této knihy zkouet, zalote si na to R Notebook nebo R Markdown Document  ono je to skoro toté. Bude se vám hodit pár klávesových zkratek: Akce Windows &amp; Linux Mac Vlo blok kódu (chunk) Ctrl+Alt+I Command+Option+I Vlo piazení (znaky &lt;-) Alt+- Option+- Prove ádek kódu s kurzorem Ctrl+Enter Command+Enter Prove blok kódu s kurzorem Ctrl+Shift+Enter Command+Shift+Enter Prove vechny bloky v souboru Ctrl+Alt+R Command+Option+R Prove vechny bloky nad kurzorem Ctrl+Alt+P Command+Option+P Zobraz celý dokument v HTML Ctrl+Shift+K Command+Shift+K Jdi na dalí blok nebo titulek Ctrl+PgDown Command+PgDown Jdi na pedchozí blok nebo titulek Ctrl+PgUp Command+PgUp Nápovda k funkci s kurzorem F1 F1 Pokud si je nechcete pamatovat, vechny mají i své tlaítko bu na toolbaru nad editorem, nebo pímo v pravém horním rohu kadého bloku kódu. Funkce tlaítek se vám zobrazí po najetí myi. 3.6.2 Vektory Zatímco v Excelu máte v jedné buce jedno íslo (nebo jeden text, jedno datum apod.), objekt základního typu (íslo, text, logická hodnota) v R je vdy vektor. To znamená, e obsahuje uspoádanou adu hodnot daného typu. Vektor me mít délku 1, pak obsahuje jen jednu hodnotu, ale taky teba milion, a pak obsahuje milion hodnot. S vektory poítají i bné operace. Kdy k vektoru s deseti ísly pitete jiný vektor s deseti ísly, bude výsledek opt vektor s deseti ísly, ve kterém se sete první s prvním, druhé s druhým atd. Pokud ale k vektoru s deseti ísly pitete vektor s jedním íslem, dojde k tzv. recyklaci druhého vektoru, co znamená, e se íslo z druhého vektoru postupn pite ke vem íslm prvního vektoru. Ukáu to radji na píkladu (funkce c tvoí vektory): c(10, 20, 30) + c(1, 2, 3) ## [1] 11 22 33 c(10, 20, 30) + 1 ## [1] 11 21 31 c(10, 20, 30) + c(1, 2) ## Warning in c(10, 20, 30) + c(1, 2): longer object length is not a multiple of ## shorter object length ## [1] 11 22 31 Vidíte, e poslední píklad sice upozorní na monou chybu, ale provede se podle pravidla recyklace. c(10, 20, 30, 40) + c(1, 2) ## [1] 11 22 31 42 Zde na chybu neupozorní, protoe se druhý vektor zrecykluje pesn dvakrát. 3.6.3 Funkce Funkce fungují úpln stejn jako v Excelu. Njak se jmenují a v závorce mají parametry. Kdy ádné parametry nemají, musí za nimi být prázdná závorka. Funkce stejn jako v Excelu vrátí njakou hodnotu a nikdy nezmní hodnotu parametr. Pár rozdíl tu ale peci jenom je: V názvech funkcí záleí na velikosti písmen. View a view jsou dv rzné funkce. Parametry jsou pojmenované, take jdou zapisovat zpsobem round(x = 1.145, digits = 2). Pokud ale dodrím závazné poadí parametr, mohu napsat i round(1.145, 2) a dostanu stejný výsledek. Funkce umí pracovat s vektory. To znamená, e nap. funkce round umí zaokrouhlit mnoho rzných ísel naráz. "],["jak-dostat-data-do-r.html", "4 Jak dostat data do R 4.1 Co myslím daty 4.2 Runí vstup dat 4.3 Chci si jen rychle nco vyzkouet 4.4 Práce s CSV soubory 4.5 Data na webové stránce 4.6 Data z jiných zdroj", " 4 Jak dostat data do R Do Excelu nebo Google Sheets asi nejastji data pímo napíete nebo odnkud zkopírujete a vloíte. Mete je také importovat odjinud, teba z CSV soubor, rzných databází nebo API. To ve plus nkolik dalích zpsob mete pouít i v R. 4.1 Co myslím daty Spreadsheet je datov velmi jednoduchý. Má jen listy, ty se skládají z bunk a kadá buka me (i nemusí) obsahovat hodnotu. Hodnoty mohou být jen pár typ: íslo, text, logická hodnota (TRUE/FALSE). R to má trochu sloitjí. Pro doasné ukládání dat pouívá pojmenované objekty (nkdy se jim íká promnné prostedí), které mohou být mnoha typ, jak primitivních (íslo, text apod.), tak sloitjích (kterým se vtinou íká tída neboli class). 4.1.1 Data frame Jednomu listu spreadsheetu se nejvíc podobá eRková tída data frame. Je to vlastn klasická datová tabulka s ádky a sloupci. Rzné sloupce mohou obsahovat rzné typy dat  nkteré ísla, jiné text  ale v jednom sloupci mohou být data jen jednoho typu. Ukázkovou tabulkou je teba ceník: produkt jednotka cena skladem Malý roubek 100 g 10.0 TRUE Velký roub ks 5.0 TRUE Malá matika 100 g 8.5 FALSE Velká matka ks 6.0 TRUE První dva sloupce obsahují text, tetí sloupec ísla a poslední sloupec logické hodnoty (nkdy oznaované jako boolean): TRUE je pravda, FALSE je nepravda. Te u tedy víte, co je data frame, a v dalím textu vám ukáu, jak ho vytvoit a dostat do nj data. 4.2 Runí vstup dat V Excelu data run vkládáte rovnou do bunk listu. To sice jde v R také, ale vtinou se to nedlá. Místo toho se napíe píkaz (nebo krátký skript ili posloupnost píkaz), který vytvoí data frame, naplní ho daty a výsledek uloí do objektu, se kterým mete dál pracovat. 4.2.1 Funkce data.frame Konkrétn ceník výe jsem vytvoil tímto píkazem: sample_df &lt;- data.frame( produkt = c(&quot;Malý roubek&quot;, &quot;Velký roub&quot;, &quot;Malá matika&quot;, &quot;Velká matka&quot;), jednotka = c(&quot;100 g&quot;, &quot;ks&quot;, &quot;100 g&quot;, &quot;ks&quot;), cena = c(10, 5, 8.5, 6), skladem = c(TRUE, TRUE, FALSE, TRUE) ) Vysvtlím podrobnji: Do objektu sample_df piadím (neboli uloím) výsledek funkce data.frame. To jde zjednoduen napsat jako sample_df &lt;- data.frame(...), kde ti teky reprezentují tzv. argumenty (nebo té parametry) funkce data.frame. Znaky &lt;- se v R pouívají k piazení (uloení) hodnoty do objektu a v RStudiu je mete zadat klávesou zkratkou Alt+- (Alt pomlka). Argumenty funkce data.frame jsou jednotlivé sloupce, které má data frame mít. Zde to je produkt, jednotka, cena a skladem. Vzájemn jsou oddleny árkou, na rozdlení do ádk nezáleí. Sloupce se definují jako název_sloupce = vektor, piem vektor musí urovat hodnoty vech ádk data framu. V píkladu vektory zadávám jako výsledek funkce c. Ta vezme vechny své argumenty (oddlené árkou) a vytvoí z nich vektor. Vimnte si, e textové hodnoty se píí do uvozovek, kdeto íselné a logické ne. Jakmile máte data frame vytvoený a uloený do objektu sample_df, mete s ním dál pracovat, nap. vypsat jeho obsah: sample_df 4.2.2 Funkce tibble Já radji pouívám funkce z ekosystému tidyverse, ve kterém funkci data.frame nahrazuje funkce tibble. Pouívá se úpln stejn, ale místo objektu tídy data frame vytvoí objekt tídy tibble, který je s data framem pln kompatibilní, ale o nco hezeji se vypisuje na konzoli. Píkaz s touto funkcí pak vypadá takto: library(tidyverse) ## Warning: package &#39;tidyverse&#39; was built under R version 4.1.3 sample_df &lt;- tibble( produkt = c(&quot;Malý roubek&quot;, &quot;Velký roub&quot;, &quot;Malá matika&quot;, &quot;Velká matka&quot;), jednotka = c(&quot;100 g&quot;, &quot;ks&quot;, &quot;100 g&quot;, &quot;ks&quot;), cena = c(10, 5, 8.5, 6), skladem = c(TRUE, TRUE, FALSE, TRUE) ) Povimnte si, e abych mohl funkci tibble pouít, musím nejdív naíst balíek tidyverse funkcí library. 4.2.3 Funkce tribble Oba výe popsané zpsoby zadávání dat do data framu mají jednu nevýhodu: data zapisujete po sloupcích, akoli je vtinou pirozenjí je psát po ádcích. Tuto nevýhodu eí funkce tribble, která je takté souástí ekosystému tidyverse. Pouívá se takto: sample_df &lt;- tribble( ~produkt, ~jednotka, ~cena, ~skladem, &quot;Malý roubek&quot;, &quot;100 g&quot;, 10, TRUE, &quot;Velký roub&quot;, &quot;ks&quot;, 5, TRUE, &quot;Malá matika&quot;, &quot;100 g&quot;, 8.5, FALSE, &quot;Velká matka&quot;, &quot;ks&quot;, 6, TRUE ) Názvy sloupc jsou v prvním ádku a kadý zaíná znakem ~. Pak následují jednotlivé ádky s hodnotami. Ve je navzájem oddleno árkou. Pokud chcete mít funkci tribble ve skriptu úhledn upravenou a dobe itelnou, mete pidat i mezery, nap. takto: sample_df &lt;- tribble( ~produkt, ~jednotka, ~cena, ~skladem, &quot;Malý roubek&quot;, &quot;100 g&quot;, 10, TRUE, &quot;Velký roub&quot;, &quot;ks&quot;, 5, TRUE, &quot;Malá matika&quot;, &quot;100 g&quot;, 8.5, FALSE, &quot;Velká matka&quot;, &quot;ks&quot;, 6, TRUE ) 4.2.4 Co kdy chci nco opravit? To je vechno moc hezké, íkáte si, ale v Excelu mohu nejen run zadat data, ale i kdykoli cokoli dodaten opravit. Jak to udlám v R? Inu, skoro stejn. V Excelu nco píete, pak máte u hotový výsledek a ten opravíte. V R nepíete rovnou výsledek, nýbr postup, jak výsledek vytvoit. Opravíte tedy postup, znovu ho spustíte a získáte opravený výsledek. Vypadá to o trochu sloitji, ale ve skutenosti je to o dost lepí, protoe informace o postupu zstane zaznamenaná. Pokud máte postup uloený ve skriptu, opravíte ho a znovu pustíte skript. Pokud máte postup v souboru rmarkdown (.Rmd), opravíte ho a znovu spustíte jen opravený blok. Pokud jste postup napsali jen do konzole, vrátité se k nmu v historii (v konzoli ipka nahoru, pípadn panel History v RStudiu), opravíte a znovu provedete. 4.2.5 Funkce edit Ve skutenosti mete i v R opravovat data skoro stejn, jako v Excelu. Slouí k tomu funkce edit, která oteve jednoduchý tabulkový editor, do nj nate data frame uvedený v jejím argumentu, a kdy v editoru cokoli zmníte a pak ho zavete, vrátí zpátky opravená data. V následujícím píkladu vyvolám editor pro objekt sample_df a výsledek zapíu zpt do stejného objektu, take pak bude obsahovat ji opravená data. Tímto zpsobem se ale ztratí postup vzniku dat, a proto se v R skoro nepouívá. sample_df &lt;- edit(sample_df) 4.3 Chci si jen rychle nco vyzkouet V základním R i v nkterých balících je docela dost vzorových data set ji zabudovaných. Slouí jako píklady pro demonstraci nkterých postup a mete si s nimi zkusit hrát. asto se teba nco ukazuje na datasetu iris, který obsahuje vlastnosti nkolika druh kosatc. iris A v tidyverse ze zabudovaný i krásný dataset postav ze Star Wars. starwars 4.4 Práce s CSV soubory V reálné praxi se data do R nejastji naítají z CSV soubor. Abyste si to mohli hned vyzkouet i v pípad, e zrovna nemáte ádný CSV po ruce, nejdív vám ukáu, jak do CSV zapisovat. 4.4.1 Funkce write_csv CSV soubor pro dalí pokusy vytvoím z data framu sample_df. S funcí write_csv z balíku readr (souást tidyverse) Je to takhle jednoduché: write_csv(sample_df, &quot;sample_df.csv&quot;) 4.4.2 Funkce read_csv Obdobn lze data z CSV souboru naíst funkcí read_csv: sample_df &lt;- read_csv(&quot;sample_df.csv&quot;) ## Rows: 4 Columns: 4 ## -- Column specification -------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (2): produkt, jednotka ## dbl (1): cena ## lgl (1): skladem ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. Vimnte si, e funkce vypsala specifikaci sloupc a jejich datových typ. Datové typy odhaduje z obsahu souboru a ne vdy je trefí správn, take nkdy me být poteba je urit run, a u v parametrech funkce read_csv, nebo v dodatené úprav získaného data framu. 4.4.3 Interaktivní import dat v Rstudiu Pokud nevíte pesn, jak importovaný soubor vypadá, je v RStudiu nejjednoduí zvolit píkaz Import Dataset z menu File. Tam si pak mete na ivém náhledu dat vybrat, co pesn chcete importovat, které sloupce jsou kterého typu apod. Podstatné je, e se vám souasn generuje i skript, který si mete zkopírovat pro opakované pouití se stejným souborem. 4.4.4 Natení CSV z webu Funkcí read_csv a dalími funkcemi z balíku readr (souást tidyverse) mete naítat i vzdálené soubory z internetu. Místo cesty a názvu lokálního souboru pak zadáte jeho URL. Ukáu trochu komplexnjí píklad, který nate data z veejného datasetu zvíat k adopci praské ZOO. animals &lt;- read_delim( &quot;https://opendata.praha.eu/dataset/9e9ec749-db30-4f0d-bb02-5b48cf090888/resource/f4432746-002d-45dd-bb09-d1719acf35fb/download/959c0e6f-5afb-489f-95ef-c9c2982963de-adopcezvirata.csv&quot;, delim = &quot;;&quot;, col_types = cols( id = col_skip(), nazev_en = col_skip(), k_prohlidce = col_logical(), ...7 = col_skip() ), trim_ws = TRUE ) ## New names: ## * `` -&gt; ...7 ## Warning: One or more parsing issues, see `problems()` for details animals Co pesn jsem udlal? Protoe dataset oddluje sloupce stedníky a ne árkami, pouil jsem místo funkce read_csv obecnjí funkci read_delim, která umouje oddlova nastavit parametrem delim. V parametru col_types jsem funkcí cols uril, které sloupce nechci importovat (col_skip) a sloupci k_prohlidce jsem nastavil logický typ (v pvodních datech je hodnota 0 a 1). Parametrem trim_ws jsem uril, e se mají odstranit nevýznamné mezery na zaátku a konci hodnot. 4.5 Data na webové stránce Nakonec vám ukáu, jak snadno mete naítat data z webových stránek. Ukáu to na tabulce v HTML, se kterou se pracuje nejsnáz, ale jde to i se stránkami, kde jsou data uspoádaná jinak. Ideální tabulka je nap. na stránce Seznam hlavních mst stát svta ve Wikipedii. Natu ji skriptem, který: Pipojí balíek rvest pro stahování informací z webu. Do objektu hlavni_mesta piadí výsledek funkce html_table. Ta vrátí vechny HTML tabulky, které na stránce jsou. Jako parametr funkce html_table zavolá funkci read_html, která nate webovou stránku ze zadaného URL. Indexem [[1]] z vráceného seznamu tabulek vybere tu první. Zobrazím, co se do objektu hlavni_mesta uloilo. library(rvest) ## Warning: package &#39;rvest&#39; was built under R version 4.1.3 ## ## Attaching package: &#39;rvest&#39; ## The following object is masked from &#39;package:readr&#39;: ## ## guess_encoding hlavni_mesta &lt;- html_table( read_html( &quot;https://cs.wikipedia.org/wiki/Seznam_hlavn%C3%ADch_m%C4%9Bst_st%C3%A1t%C5%AF_sv%C4%9Bta&quot; ) )[[1]] hlavni_mesta Asi jste si vimli, e získaná data nejsou perfektní. Ve sloupci stát je název kadá zem dvakrát. Je to proto, e ve zdrojové tabulce jsou ped názvem zem vlajky, které název obsahují v atributu alt. Navíc je poet obyvatel typu text, protoe si funkce neporadí s eskými mezerami mezi ády. Obojí jde snadno napravit. Ukáu vám jak, ale u to zatím nebudu podrobn vysvtlovat. To si necháme na jindy. mutate( hlavni_mesta, Stát = str_sub(Stát, 1, nchar(Stát) / 2), Obyvatel = as.double(str_remove_all(Obyvatel, &quot;\\\\s&quot;)) ) 4.6 Data z jiných zdroj Pomocí rzných balík jde naítat data i z jich typ zdroj. Já teba nejastji pracuji s daty Google Search Console nebo Google Analytics, která naítám pes API (aplikaní rozhraní) resp. prostednictvím specializovaných balík, které toto API zpístupují. Pracovat jde i s daty ve vech bných SQL i NoSQL databázích. Tyto metody jsou u ale nad rámec tohoto lánku. "],["manipulace-s-daty.html", "5 Manipulace s daty 5.1 Przkum dat a výbr sloupc 5.2 Výbr sloupc 5.3 Filtrování neboli výbr ádk 5.4 azení ádk 5.5 Odvozování nových sloupc 5.6 Seskupování ádk a agregace 5.7 Tahák s dalími funkcemi", " 5 Manipulace s daty V této kapitole vám ukáu, jak jde s daty v R manipulovat. Daty myslím jednu i více tabulek uloených v objektech tídy data frame a manipulací myslím zejména: výbr sloupc, filtrování neboli výbr ádk, azení ádk, odvozování nových sloupc, seskupování ádk a agregaci, spojování více tabulek. K tomu vemu pouívám zásadn balíky z ekosystému tidyverse, konkrétn dplyr a tidyr. Vy si ale konkrétní balíky nemusíte pamatovat, protoe staí, kdy na zaátku deklarujete celou tidyverse. library(tidyverse) Balík tidyverse mj. obsahuje i vzorový dataset starwars, na kterém vtinu postup ukáu. Nemusíte tedy nikde shánt a importovat jiná data. Pokud si ve vyzkouíte i na njakých vlastních datech, bude to jedin dobe. 5.1 Przkum dat a výbr sloupc Ped dalím zpracováním je dobré si data poádn prohlédnout a ujasnit si, co pesn popisují, jaké datové typy mají jednotlivé sloupce, zda jsou konzistentní, nejsou v nich chyby, nco neschází atd. Nejprve si asi data frame zobrazíte, co mete udlat nkolika zpsoby. V R Markdownu ho vtinou staí vypsat názvem a tabulkou lze pak interaktivn listovat. To ale nefunguje na konzoli a ani výstup do finálního dokumentu není nejlepí. starwars Lepí tedy asi bude funkce View, která oteve tabulkové zobrazení. Vyzkouejte si to. View(starwars) Krom prostého zobrazení tabulky, mete zkusit pár dalích funkcí, které vám toho o datech eknou víc nebo pehlednji. Já mám rád funkci glimpse, protoe hezky ukazuje názvy vech sloupc, jejich datové typy (tídy) a náhled nkolika prvních hodnot. glimpse(starwars) ## Rows: 87 ## Columns: 14 ## $ name &lt;chr&gt; &quot;Luke Skywalker&quot;, &quot;C-3PO&quot;, &quot;R2-D2&quot;, &quot;Darth Vader&quot;, &quot;Leia Or~ ## $ height &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2~ ## $ mass &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.~ ## $ hair_color &lt;chr&gt; &quot;blond&quot;, NA, NA, &quot;none&quot;, &quot;brown&quot;, &quot;brown, grey&quot;, &quot;brown&quot;, N~ ## $ skin_color &lt;chr&gt; &quot;fair&quot;, &quot;gold&quot;, &quot;white, blue&quot;, &quot;white&quot;, &quot;light&quot;, &quot;light&quot;, &quot;~ ## $ eye_color &lt;chr&gt; &quot;blue&quot;, &quot;yellow&quot;, &quot;red&quot;, &quot;yellow&quot;, &quot;brown&quot;, &quot;blue&quot;, &quot;blue&quot;,~ ## $ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, ~ ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;none&quot;, &quot;none&quot;, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;,~ ## $ gender &lt;chr&gt; &quot;masculine&quot;, &quot;masculine&quot;, &quot;masculine&quot;, &quot;masculine&quot;, &quot;femini~ ## $ homeworld &lt;chr&gt; &quot;Tatooine&quot;, &quot;Tatooine&quot;, &quot;Naboo&quot;, &quot;Tatooine&quot;, &quot;Alderaan&quot;, &quot;T~ ## $ species &lt;chr&gt; &quot;Human&quot;, &quot;Droid&quot;, &quot;Droid&quot;, &quot;Human&quot;, &quot;Human&quot;, &quot;Human&quot;, &quot;Huma~ ## $ films &lt;list&gt; &lt;&quot;The Empire Strikes Back&quot;, &quot;Revenge of the Sith&quot;, &quot;Return~ ## $ vehicles &lt;list&gt; &lt;&quot;Snowspeeder&quot;, &quot;Imperial Speeder Bike&quot;&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, &quot;Imp~ ## $ starships &lt;list&gt; &lt;&quot;X-wing&quot;, &quot;Imperial shuttle&quot;&gt;, &lt;&gt;, &lt;&gt;, &quot;TIE Advanced x1&quot;,~ Vimnte si, e poslední ti sloupce jsou tídy list. To znamená, e v kadé buce je uloen celý seznam více hodnot. Moc dobe se s tím nepracuje, v praxi na to asi hned tak nenarazíte, tak radji tyhle sloupce odstraníme. Jak? Tím, e vybereme vechny ostatní funkcí select a výsledek uloíme do vlastního objektu. my_starwars &lt;- select(starwars, name:species) K funkci select se jet za chvíli vrátím. Te zkuste znovu glimps a vimnte si, e ti poslední sloupce zmizely. glimpse(my_starwars) ## Rows: 87 ## Columns: 11 ## $ name &lt;chr&gt; &quot;Luke Skywalker&quot;, &quot;C-3PO&quot;, &quot;R2-D2&quot;, &quot;Darth Vader&quot;, &quot;Leia Or~ ## $ height &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2~ ## $ mass &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.~ ## $ hair_color &lt;chr&gt; &quot;blond&quot;, NA, NA, &quot;none&quot;, &quot;brown&quot;, &quot;brown, grey&quot;, &quot;brown&quot;, N~ ## $ skin_color &lt;chr&gt; &quot;fair&quot;, &quot;gold&quot;, &quot;white, blue&quot;, &quot;white&quot;, &quot;light&quot;, &quot;light&quot;, &quot;~ ## $ eye_color &lt;chr&gt; &quot;blue&quot;, &quot;yellow&quot;, &quot;red&quot;, &quot;yellow&quot;, &quot;brown&quot;, &quot;blue&quot;, &quot;blue&quot;,~ ## $ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, ~ ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;none&quot;, &quot;none&quot;, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;,~ ## $ gender &lt;chr&gt; &quot;masculine&quot;, &quot;masculine&quot;, &quot;masculine&quot;, &quot;masculine&quot;, &quot;femini~ ## $ homeworld &lt;chr&gt; &quot;Tatooine&quot;, &quot;Tatooine&quot;, &quot;Naboo&quot;, &quot;Tatooine&quot;, &quot;Alderaan&quot;, &quot;T~ ## $ species &lt;chr&gt; &quot;Human&quot;, &quot;Droid&quot;, &quot;Droid&quot;, &quot;Human&quot;, &quot;Human&quot;, &quot;Human&quot;, &quot;Huma~ Obas jet pouívám funkci summary, která u íselných sloupc (resp. obecn vektor) ukáe jednoduchou statistiku  minimum, první kvartil, median, prmr, tetí kvartil, maximum a poet prázdných hodnot. summary(my_starwars) ## name height mass hair_color ## Length:87 Min. : 66.0 Min. : 15.00 Length:87 ## Class :character 1st Qu.:167.0 1st Qu.: 55.60 Class :character ## Mode :character Median :180.0 Median : 79.00 Mode :character ## Mean :174.4 Mean : 97.31 ## 3rd Qu.:191.0 3rd Qu.: 84.50 ## Max. :264.0 Max. :1358.00 ## NA&#39;s :6 NA&#39;s :28 ## skin_color eye_color birth_year sex ## Length:87 Length:87 Min. : 8.00 Length:87 ## Class :character Class :character 1st Qu.: 35.00 Class :character ## Mode :character Mode :character Median : 52.00 Mode :character ## Mean : 87.57 ## 3rd Qu.: 72.00 ## Max. :896.00 ## NA&#39;s :44 ## gender homeworld species ## Length:87 Length:87 Length:87 ## Class :character Class :character Class :character ## Mode :character Mode :character Mode :character ## ## ## ## 5.1.1 Prázdné hodnoty R rozliuje prázdné (nedefinované, neznámé) hodnoty a oznauje je hodnotou NA. Pozor, NA není ani nula, ani prázdný etzec. Je to indikátor, e danou hodnotu neznáme, nebo neexistuje. Proto s NA nejde poítat. NA + 10 ## [1] NA sum(c(10, 20, NA, 30)) ## [1] NA Vechny tyto a podobné operace vrací NA. A protoe to je nkdy dost nepraktické, jde to v uritých situacích obejít. Nap. souet nebo prmr mete vypoítat takto: sum(c(10, 20, NA, 30), na.rm = TRUE) ## [1] 60 mean(c(10, 20, NA, 30), na.rm = TRUE) ## [1] 20 Existují i funkce, kterými mete ádky s NA z data framu úpln odstranit drop_na(my_starwars) nebo nahradit jinou hodnotou funkcí replace_na. 5.2 Výbr sloupc U jsem ukázal, e výbr sloupc provedete funkcí select. Ta má jako první parametr data frame a za ním následuje seznam sloupc, který mete napsat nkolika zpsoby. Vtinou je nejjednoduí sloupce vyjmenovat a oddlit árkou: select(my_starwars, name, hair_color, eye_color) Mete pouít i souvislý rozsah sloupc oddlený dvojtekou: select(my_starwars, hair_color:eye_color) Pípadn oba zpsoby zkombinovat: select(my_starwars, name, hair_color:eye_color) Tch zpsob je ale mnohem víc a vechny je najdete v nápovd: ?dplyr_tidy_select 5.2.1 Funkcionální princip Podstatné je, e funkce select ani ádná jiná nikdy nemní objekt, se kterým pracuje (zde data frame my_starwars). R je tzv. funkcionální jazyk, co znamená, e vechny funkce njak zpracují parametry, vrátí výsledek jako nový objekt (který si mete i nemusíte uloit), ale parametry nikdy nezmní. Mimochodem, jazyk vzorc Excelu je taky funkcionální  funkce v nm taky nco vrátí, ale parametry nezmní. 5.2.2 Pipes (trubky, fajfky) Pedstavte si, e chcete na objekt (zde data frame) aplikovat njakou funkci, a na výsledek, který dostanete, chcete aplikovat dalí funkci. Stejn jako v Excelu to jde udlat vnoováním funkcí: glimpse(select(my_starwars, name, hair_color)) ## Rows: 87 ## Columns: 2 ## $ name &lt;chr&gt; &quot;Luke Skywalker&quot;, &quot;C-3PO&quot;, &quot;R2-D2&quot;, &quot;Darth Vader&quot;, &quot;Leia Or~ ## $ hair_color &lt;chr&gt; &quot;blond&quot;, NA, NA, &quot;none&quot;, &quot;brown&quot;, &quot;brown, grey&quot;, &quot;brown&quot;, N~ Jene vnoování mnoha funkcí do sebe v Excelu vichni nenávidíme. Jde tím sice udlat úasné vci, ale je to píern nepehledné a náchylné k chybám. Zápis toti zaíná tím, co se má udlat jako poslední, a to, co se má udlat jako první, je utopené nkde uprosted. Peklo. Proto má R operátor pipe, se kterým pedelý výraz pepíu takhle: my_starwars |&gt; select(name, hair_color) |&gt; glimpse() ## Rows: 87 ## Columns: 2 ## $ name &lt;chr&gt; &quot;Luke Skywalker&quot;, &quot;C-3PO&quot;, &quot;R2-D2&quot;, &quot;Darth Vader&quot;, &quot;Leia Or~ ## $ hair_color &lt;chr&gt; &quot;blond&quot;, NA, NA, &quot;none&quot;, &quot;brown&quot;, &quot;brown, grey&quot;, &quot;brown&quot;, N~ pípadn jet pehlednji: my_starwars |&gt; select(name, hair_color) |&gt; glimpse() ## Rows: 87 ## Columns: 2 ## $ name &lt;chr&gt; &quot;Luke Skywalker&quot;, &quot;C-3PO&quot;, &quot;R2-D2&quot;, &quot;Darth Vader&quot;, &quot;Leia Or~ ## $ hair_color &lt;chr&gt; &quot;blond&quot;, NA, NA, &quot;none&quot;, &quot;brown&quot;, &quot;brown, grey&quot;, &quot;brown&quot;, N~ Operátor pipe (|&gt;) vdy vezme výsledek výrazu vlevo a pouije ho jako první parametr funkce vpravo. Celé se to tedy píe i te pesn v poadí zpracování: vezmu objekt my_starwars na nj aplikuji funkci select a na výsledek aplikuji funkci glimpse. Pro porovnání obecn oba zpsoby zápisu: # Zápis s pipes objekt |&gt; prvni_funkce(druhy_parametr_prvni_funkce, treti_parametr_prvni_funkce) |&gt; druha_funkce(druhy_parametr_druhe_funkce) |&gt; treti_funkce(druhy_parametr_treti_funkce) |&gt; ctvrta_funkce() |&gt; pata_funkce(druhy_parametr_pate_funkce) # Zápis s vnoenými funkcemi pata_funkce( ctvrta_funkce( treti_funkce( druha_funkce( prvni_funkce( objekt, druhy_parametr_prvni_funkce, treti_parametr_prvni_funkce ), druhy_parametr_druhe_funkce ), druhy_parametr_treti_funkce ) ), druhy_parametr_pate funkce ) Kdyby se jednalo o skutené funkce, oba zápisy by dlaly toté, ale první je výrazn pehlednjí a lépe se píe. 5.2.2.1 Starí pipe Skoro ve vech návodech a dokumentaci k R najdete jiný operátor pipe: %&gt;%. Dív toti R operátor pipe nemlo a nahrazoval se operátorem z knihovny magrittr. Te u ale R má nativní operátor |&gt; a já ho mám radi. Pro vás je dleité, e %&gt;% a |&gt; je v principu toté a skoro vdy se to chová stejn. 5.3 Filtrování neboli výbr ádk 5.3.1 Funkce filter Pokud nechcete zobrazit i dále zpracovat vechny ádky data framu, vyberete si jen nkteré. Njastji se na to pouívá funkce filter. Tohle je její nejjednoduí podoba: my_starwars |&gt; filter(hair_color == &quot;blond&quot;) Jako parametr jsem napsal logickou podmínku, e se hodnota ve sloupci hair_color musí rovnat blond. Podmínky ale mohu i kombinovat, a pak musí být oddlené árkou. my_starwars |&gt; filter( hair_color == &quot;brown&quot;, eye_color == &quot;blue&quot; ) |&gt; select(name, hair_color, eye_color) Na ísla fungují bné srovnávací operátory &gt; (vtí), &gt;= (vtí nebo rovno), &lt; (mení), &lt;= (mení nebo rovno). my_starwars |&gt; filter(height &gt; 220) |&gt; select(name, height) V podmínkách ale mete pouívat i rzné funkce. Chcete teba najít vechny postavy, které jsou vyí ne prmr? my_starwars |&gt; filter(height &gt; mean(height, na.rm = TRUE)) |&gt; select(name, height) Nebo vechny, jejich výka je neznámá? my_starwars |&gt; filter(is.na(height)) |&gt; select(name, height) 5.3.2 Dalí funkce pro výbr ádk Nkdy chcete omezit poet ádk jinak ne logickou podmínkou. Nap. chcete vrátit jen prvních pt: my_starwars |&gt; slice_head(n = 5) |&gt; select(name) nebo poslední 3: my_starwars |&gt; slice_tail(n = 3) |&gt; select(name) nebo 3 nejvyí: my_starwars |&gt; slice_max(order_by = height, n = 3) |&gt; select(name, height) nebo 5 % nejvyích: my_starwars |&gt; slice_max(order_by = height, prop = 0.05) |&gt; select(name, height) 5.4 azení ádk ádky se adí funkcí arrange, ve které se jako parametry uvedou sloupce, podle kterých se má adit, oddlené árkou. my_starwars |&gt; arrange(species, name) |&gt; select(species, name) Jde adit i sestupn pomocí funkce desc. my_starwars |&gt; arrange(species, desc(height)) |&gt; select(species, name, height) 5.5 Odvozování nových sloupc Funkcí mutate jde vypoítat hodnoty sloupc, a u nových, nebo stávajících. V píkladu spoítám BMI z váhy dlené výkou v metrech na druhou a ped jméno doplním slovo tloutík, pokud má daná postava nadváhu. my_starwars |&gt; select(name:mass) |&gt; mutate( bmi = mass / (height / 100) ** 2, name = paste0(if_else(bmi &gt; 30, &quot;tloutík &quot;, &quot;&quot;), name) ) K tomu pár vysvtlení: Operátor ** umocuje. Funkce paste0 spojuje víc textových etzc do jednoho. Bez 0 na konci mezi n dá mezeru pípadn jiný oddlova dle parametru. funkce if_else funguje stejn jako IF v Excelu  podle podmínky v první parametru vrátí bu druhý, nebo tetí parametr. Zvyknte si, e data frame je vlastn seznam vektor, které odpovídají sloupcm. Výraz height / 100 tedy vydlí celý vektor, tj. postupn jednotlivé jeho hodnoty, íslem 100. Výpoet tedy neprobíhá po ádcích, nýbr po sloupcích. Potebujete-li sloitjí vtvení, jde funkce if_else vnoovat do sebe, ale není to moc pehledné. Lepí je funkce case_when, která se pouívá takhle: my_starwars |&gt; select(name:mass) |&gt; mutate( bmi = round(mass / (height / 100) ** 2), postava = case_when( bmi &lt; 25 ~ &quot;hubeour&quot;, bmi &gt;= 25 &amp; bmi &lt;= 30 ~ &quot;akorát&quot;, bmi &gt; 30 ~ &quot;tloutík&quot; ) ) 5.6 Seskupování ádk a agregace 5.6.1 funkce sumarise Zanu prostou agregací. Slouí k ní funkce summarise a pouívá se skoro stejn, jako funkce mutate. Jen je urená pro agreganí funkce (poet, souet, prmr apod.) a z výsledku vynechá vechny sloupce, které se neagregují nebo neslouí jako seskupovací klíe (viz dále). eknme, e chci vdt, kolik postav v datasetu je a jakou mají prmrnou výku. my_starwars |&gt; summarise( n = n(), height = mean(height, na.rm = TRUE) ) Vimnte si, e funkce n() vrátí poet ádk data framu. lo by s ní spoítat teba poet planet? Nelo. Na to slouí funkce n_distinct, která spoítá poet unikátních hodnot vektoru. my_starwars |&gt; summarise( n_homes = n_distinct(homeworld), n_species = n_distinct(species) ) 5.6.2 Funkce group_by V reálné praxi potebujete agregovat celý dataset do jednoho ádku málokdy. astjí jsou agregace podle njakých skupin. K seskupení slouí funkce group_by a vypadá takhle: my_starwars |&gt; group_by(species) |&gt; summarise( n = n(), height = mean(height, na.rm = TRUE) ) jde kombinovat i víc seskupovacích klí: my_starwars |&gt; group_by(species, homeworld) |&gt; summarise( n = n(), height = mean(height, na.rm = TRUE) ) ## `summarise()` has grouped output by &#39;species&#39;. You can override using the ## `.groups` argument. 5.6.3 Funkce count Protoe se poloky podle njakého klíe poítají velmi asto, existuje zkratka. Místo toho, abyste psali: my_starwars |&gt; group_by(species) |&gt; summarise(n = n()) mete zvolit kratí zápis a výsledek rovnou sestupn setídit: my_starwars |&gt; count(species, sort = TRUE) 5.6.4 Kombinace group_by s dalími funkcemi pro manipulaci dat Funkce group_by nemusí slouit jen k agregaci. Respektive k agregaci slouí skoro vdycky, ale ta nemusí být hlavním cílem. O nco vý jsem vám ukázal, jak pomocí funkcí filter a mean vybrat postavy, které jsou nadprmrn vysoké: my_starwars |&gt; filter(height &gt; mean(height, na.rm = TRUE)) |&gt; select(name, height) Co kdybych ale chtl vybrat jen ty postavy, které jsou nadprmrn vysoké jen v rámci svého druhu? Pouiju group_by a pro pehlednost výsledek jet setídím. my_starwars |&gt; group_by(species) |&gt; filter(height &gt; mean(height, na.rm = TRUE)) |&gt; select(name, species, height) |&gt; arrange(species, desc(height)) Funkce group_by jde výborn dohromady i s funkcemi slice_xxx. Nap. bych chtl vidt z kadého druhu jen nejvyí postavu: my_starwars |&gt; group_by(species) |&gt; slice_max(height) |&gt; select(species, name, height) A konen jde group_by kombinovat i s mutate  do pedelého výstupu doplním, z kolika zástupc svého druhu je daný exemplár nejvyí: my_starwars |&gt; group_by(species) |&gt; mutate(out_of = n()) |&gt; slice_max(height) |&gt; select(species, name, tallest = height, out_of) Vimnte si, e jsem musel dát mutate jet ped slice_max, protoe po nm by funkce n() vracela u jen 1. A ukázal jsem vám také, jak pomocí funkce select pejmenovat sloupec (co jde i samostatnou funkcí rename, ale tady je to jednoduí takhle). 5.7 Tahák s dalími funkcemi Vzal jsem to vechno jen z rychlíku, ve skutenosti je tch moností mnohem víc. Perfektní tahák najdete v RStudiu v menu Help -&gt; Cheat Sheets -&gt; Data Transformation with dplyr, pípadn zde je on-line verze. "],["grafy.html", "6 Grafy a vizualizace 6.1 Histogram 6.2 Scatter plot neboli bodový graf 6.3 Sloupeky 6.4 arový graf a timeline 6.5 Boxplot 6.6 Koláový graf 6.7 Tahák", " 6 Grafy a vizualizace Grafy a vizualizace jdou dlat v R mnoha zpsoby. Nco je u v základním R a k tomu jsou stovky rzných balík. Já ale pouívám skoro na vechno balíek ggplot2, který patí k nejpopulárnjím. Upímn, ggplot2 je dost komplikovaný, umí toho stran moc a m se nechce to vechno podrobn vysvtlovat. Vlastn by to ani nebylo v souladu se zámrem kníky, protoe vás mám nauit hlavn to, co jde i v Excelu. A Excel, pokud jde o grafy, umí jen pár procent toho co ggplot2. Take spí ne teoretický výklad vám ukáu nkolik nejtypitjích píklad. Nebudu je podrobn vysvtlovat, take bu je jenom podle svých poteb opisujte (i s tím si vystaíte dost dlouho), nebo si ggplot2 dkladnji nastudujte z jiných zdroj. Pipojím knihovnu (ve skutenosti není teba, je u v tidyverse) a dáme se do toho. library(ggplot2) 6.1 Histogram Histogram vám rychle ukáe rozloení kontinuálních (íselných) hodnot. Bývá prvním grafem, na který se u takového typu dat dívám. V minulé kapitole jsme pracovali s datasetem starwars, tak u nj jet chvíli zstanu. Nap. m zajímá rozloení výky postav: starwars |&gt; ggplot(aes(x = height)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## Warning: Removed 6 rows containing non-finite values (stat_bin). Ani to nebolelo, co? Funkci ggplot mu kombinovat i s libovolnou pedelou manipulací dat. Take kdybych chtl jen rozloení výky lidí, udlám to takhle: starwars |&gt; filter(species == &quot;Human&quot;) |&gt; ggplot(aes(x = height)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## Warning: Removed 4 rows containing non-finite values (stat_bin). 6.2 Scatter plot neboli bodový graf Scatter plot pomáhá odhalit korelace mezi kontinuálními promnnými. Souvisí napíklad výka s váhou postavy? Abych to zjistil, Vyrobím scatter plot, ve kterém na jednu osu vynesu výku a na druhou váhu. starwars |&gt; ggplot(aes(x = height, y = mass)) + geom_point() ## Warning: Removed 28 rows containing missing values (geom_point). Z toho moc nepoznám, co? Je to tím, e jedna postava vahou výrazn vybouje. Tak ji pedem odfiltruju (operátor != znamená nerovnost): starwars |&gt; filter(mass != max(mass, na.rm = TRUE)) |&gt; ggplot(aes(x = height, y = mass)) + geom_point() To u je lepí. Korelace sice není úpln pravidelná, není moc lineární, ale njaká tam je  vyí postavy jsou vtinou i tí. To jde ukázat i tím, e nad vrstvu puntík poloím jet vrstvu trendu. Vrstvení víc graf pes sebe umí ggplot krásn. starwars |&gt; filter(mass != max(mass, na.rm = TRUE)) |&gt; ggplot(aes(x = height, y = mass)) + geom_point() + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; A lo by zkusit i lineární trend: starwars |&gt; filter(mass != max(mass, na.rm = TRUE)) |&gt; ggplot(aes(x = height, y = mass)) + geom_point() + geom_smooth(method = lm) ## `geom_smooth()` using formula &#39;y ~ x&#39; 6.3 Sloupeky Dalí populární graf je sloupcový. Ukazuje obvykle íselnou (kontinuální) promnnou vi kategorické (resp. diskrétní). Zobrazím jím prmrnou výku deseti nejvyích druh postav. starwars |&gt; group_by(species) |&gt; summarise(height = mean(height, na.rm = TRUE)) |&gt; slice_max(order_by = height, n = 10) |&gt; ggplot(aes(x = height, y = species)) + geom_col() Není to setídné, co? Není, protoe ggplot automaticky tídí hodnoty na osách, take na ose y setídí druhy podle abecedy. Jde to ale napravit funkcí fct_reorder, kterou eknu, e se mají druhy setídit podle výky: starwars |&gt; group_by(species) |&gt; summarise(height = mean(height, na.rm = TRUE)) |&gt; slice_max(order_by = height, n = 10) |&gt; ggplot(aes(x = height, y = fct_reorder(species, height))) + geom_col() Te je ale zas dost oklivý název osy y, take i ten opravím: starwars |&gt; group_by(species) |&gt; summarise(height = mean(height, na.rm = TRUE)) |&gt; slice_max(order_by = height, n = 10) |&gt; ggplot(aes(x = height, y = fct_reorder(species, height))) + geom_col() + labs(x = &quot;výka v cm&quot;, y = &quot;druh&quot;, title = &quot;Prmrná výka 10 nejvyích druh&quot;) 6.4 arový graf a timeline árový graf se nejastji pouívá na vývoj neho v ase, take si na demonstraci pjím dataset economics, který je k balíku ggplot2 pibalený. Obsahuje mj. populaci USA v tisících za jednotlivé msíce od ervence 1967 do dubna 2015. Z tchto údaj vykreslený graf vypadá takhle: economics |&gt; ggplot(aes(x = date, y = pop)) + geom_line() 6.5 Boxplot Hned na zaátku jsem ukazoval histogram, který zobrazuje rozdlení hodnot. Kdy ale chcete vzájemn porovnat rozdlení ve více kategoriích, teba v datasetu starwars porovnat výku lidí a droid, mnohem lépe se na to hodí boxplot. Ten vypadá takhle: starwars |&gt; filter(species %in% c(&quot;Human&quot;, &quot;Droid&quot;)) |&gt; ggplot(aes(x = species, y = height)) + geom_boxplot() ## Warning: Removed 5 rows containing non-finite values (stat_boxplot). Z grafu jde vyíst, e droidi mají mnohem vtí rozptyl výek (celá výka grafu vetn fous) ne lidé. Zárove mají velmi nízko posazený medián (vodorovná ára uvnit obdélníku) a jejich stední polovina (druhý a tetí kvartil; celý obdélník) je nií ne stední polovina lidí. Nejvyí droid je ale podobn vysoký jako nejvyí lovk (konec horního fousu). 6.6 Koláový graf V základním R jakýsi primitivní kolá je a ggplot2 ho umí taky. Jednak je to ale dost porod a jednak ho my, analytici, skoro nepouíváme, protoe to je takový vizualizaní antipattern. Radji místo kolá pouívejte sloupeky, nap. takto: starwars |&gt; count(species) |&gt; drop_na() |&gt; slice_max(order_by = n, n = 5, with_ties = FALSE) |&gt; ggplot(aes(x = TRUE, y = n / sum(n) * 100, fill = fct_reorder(species, n))) + geom_col() + geom_text( aes(label = paste0(round(n / sum(n) * 100, 2), &quot;%&quot;)), position = position_stack(vjust = 0.5) ) + scale_x_discrete(labels = NULL, breaks = NULL) + labs(x = NULL, y = &quot;podíl druh v %&quot;, fill = &quot;druhy&quot;) + scale_fill_brewer(palette = &quot;Set3&quot;) Graf jsem schváln trochu vyperkoval, pidal ísla, zmnil barevnou paletu apod., take kód je sloitjí, ne by být musel. 6.7 Tahák Stejn jako pro datové manipulace pomocí balíku dplyr, existuje i pro grafy pomocí balíku ggplot2 výborný tahák. A najdete ho i off-line pímo v RStudiu v menu help. Krom toho doporuuju tenhle vzorník nejastjích graf. "],["priklady.html", "7 Souvislé píklady 7.1 Poznámky z porady 7.2 Roní rozpoet freelancera", " 7 Souvislé píklady Gratuluju, dostali jste se a do poslední kapitoly, kde vám ukáu pár souvislých píklad propojujících látku celé knihy. 7.1 Poznámky z porady Na schzce s klientem jsem si do Keepu v telefonu poznamenal úkoly, které mám udlat. Ke kadému úkolu jsem si napsal odhad náronosti v hodinách a poadovaný termín. Vypadá to njak takhle: - Rychlá analýza UX a designu: 8 hodin, T 1.3. - Klíovka etina: 16 hodin, T 15. 3. - Klíovka anglitina: 8 hodin, T 15. 3. - Návrh obsahové strategie: 8 hodin, T 20.3. - Píprava workshopu pro tým: 2 hodiny, T 1.4. Te chci ocenit jednotlivé úkoly hodinovou sazbou a seíst celkový as i cenu. S tak malým seznamem to nejrychleji udlám run, ale kdyby byl delí, mu si práci usnadnit spreadsheetem nebo R. Vybral jsem si R :-) 7.1.1 Které balíky budu potebovat Krom tidyverse jet lubridate, co je chytrý balíek na práci s asovými údaji  datum, as, doba, asový interval apod. library(tidyverse) library(lubridate) 7.1.2 Natení textu Text si zkopíruju z Keepu a natu ho do promnné input funkcí read_lines, která vrátí znakový vektor jednotlivých ádk. Parametr skip íká, e se má peskoit první (prázdný) ádek, parametr locale uruje kódování znak a je poteba jen ve Windows. Na Macu nebo Linuxu ho tam nedávejte. input &lt;- read_lines(&quot; - Rychlá analýza UX a designu: 8 hodin, T 1.3. - Klíovka etina: 16 hodin, T 15. 3. - Klíovka anglitina: 8 hodin, T 15. 3. - Návrh obsahové strategie: 8 hodin, T 20.3. - Píprava workshopu pro tým: 2 hodiny, T 1.4. &quot;, skip = 1, locale = locale(encoding = &quot;Windows-1250&quot;)) Zkontroluju si, jestli se ádky podailo správn naíst: input ## [1] &quot; - Rychlá analýza UX a designu: 8 hodin, T 1.3.&quot; ## [2] &quot; - Klíovka etina: 16 hodin, T 15. 3.&quot; ## [3] &quot; - Klíovka anglitina: 8 hodin, T 15. 3.&quot; ## [4] &quot; - Návrh obsahové strategie: 8 hodin, T 20.3.&quot; ## [5] &quot; - Píprava workshopu pro tým: 2 hodiny, T 1.4.&quot; Podailo, take mohu vytvoit data frame. 7.1.3 Pevod na data Vytvoím data frame a v nm ádky rozdlím na samostatné promnné (sloupce). Pak pidám hodinovou sazbu a dopoítám cenu. Nejprve ukáu celý postup a pak ho vysvtlím. df &lt;- data.frame(input) |&gt; extract( col = 1, into = c(&quot;task&quot;, &quot;hours&quot;, &quot;day&quot;, &quot;month&quot;), regex = &quot; - ([^:]+): ([0-9]+).+T ([0-9]+).+([0-9]+)&quot;, convert = TRUE ) |&gt; mutate( deadline = make_date(year(today()), month, day), rate = 2500, price = hours * rate ) |&gt; select(task, hours, price, deadline) Povedlo se? df 7.1.3.1 Podrobný výklad postupu Pokud je vám a sem vechno jasné, tohle peskote. Pro ostatní popíu postup vytvoení data framu podrobnji. Nejprve jsem vytvoil data frame s jedním sloupcem obsahujícím ádky pvodního vstupního textu. Poslouila mi funkce data.frame ze základního R. data.frame(input) Pomocí funkce extract z balíku tidyr (souást tidyverse) jsem jednotlivé ádky rozdlil na víc sloupc. Pouil jsem k tomu tyto parametry: col: íká, který sloupec bude vstupní; zde jen poadovým íslem, ale jde i názvem i jinak. into: znakovým vektorem udává názvy nových sloupc, které funce vytvoí. regex: regulární výraz, který uruje obsah nových sloupc pomocí skupin v kulatých závorkách. convert: hodnota TRUE íká, e se mají íselné hodnoty pevést z etzce na ísla. data.frame(input) |&gt; extract( col = 1, into = c(&quot;task&quot;, &quot;hours&quot;, &quot;day&quot;, &quot;month&quot;), regex = &quot; - ([^:]+): ([0-9]+).+T ([0-9]+).+([0-9]+)&quot;, convert = TRUE ) Pomocí funkce mutate z balíku dplyr (souást tidyverse) jsem pidal ti dalí vypoítané sloupce deadline, rate a price. Pro deadline jsem pouil funkci make_date z baliku lubridate, která jako parametry chce rok (ten jsem vzal jako rok z dneního data: year(today())), msíc a den. Ostatní je asi jasné. data.frame(input) |&gt; extract( col = 1, into = c(&quot;task&quot;, &quot;hours&quot;, &quot;day&quot;, &quot;month&quot;), regex = &quot; - ([^:]+): ([0-9]+).+T ([0-9]+).+([0-9]+)&quot;, convert = TRUE ) |&gt; mutate( deadline = make_date(year(today()), month, day), rate = 2500, price = hours * rate ) Funkcí select u jen vyberu sloupce, které chci skuten zaadit do výsledného data framu. data.frame(input) |&gt; extract( col = 1, into = c(&quot;task&quot;, &quot;hours&quot;, &quot;day&quot;, &quot;month&quot;), regex = &quot; - ([^:]+): ([0-9]+).+T ([0-9]+).+([0-9]+)&quot;, convert = TRUE ) |&gt; mutate( deadline = make_date(year(today()), month, day), rate = 2500, price = hours * rate ) |&gt; select(task, hours, price, deadline) A nakonec celý výsledek na prvním ádku uloím do promnné df. df &lt;- data.frame(input) |&gt; extract( col = 1, into = c(&quot;task&quot;, &quot;hours&quot;, &quot;day&quot;, &quot;month&quot;), regex = &quot; - ([^:]+): ([0-9]+).+T ([0-9]+).+([0-9]+)&quot;, convert = TRUE ) |&gt; mutate( deadline = make_date(year(today()), month, day), rate = 2500, price = hours * rate ) |&gt; select(task, hours, price, deadline) 7.1.4 Souet hodin a ceny Zbývá seíst cenu a pevést hodiny na lovkodny (sloupec md). df |&gt; summarise( md = sum(hours) / 8, price = sum(price) ) 7.2 Roní rozpoet freelancera Pracujete na volné noze, klientm fakturujete vdy na konci msíce odpracované hodiny jednotnou hodinovou sazbou, máte njaké opakující se výdaje, z nich nkteré jsou v cizí mn, a jste plátci DPH. Chcete si sestavit roní finanní plán. 7.2.1 Které balíky budou poteba Krom ji známých tidyverse a lubridate to bude priceR, který umí naíst mnové kurzy. library(tidyverse) library(lubridate) library(priceR) 7.2.2 Kurzovní lístek Protoe budu mít ve výdajích zahraniní mny, stáhnu si nejprve aktuální kurzy CZK funkcí exchange_rate_latest z balíku priceR. Výsledný kurzový lístek si uloím do objektu exchange_rates a ji známou funkcí glimpse se podívám, jak vypadá. exchange_rates &lt;- exchange_rate_latest(&quot;CZK&quot;) ## Daily CZK exchange rate as at end of day 2022-03-30 GMT exchange_rates |&gt; glimpse() ## Rows: 169 ## Columns: 2 ## $ currency &lt;fct&gt; AED, AFN, ALL, AMD, ANG, AOA, ARS, AUD, AWG, ~ ## $ one_czk_is_equivalent_to &lt;dbl&gt; 0.166794, 3.983811, 4.998511, 22.096493, 0.08~ 7.2.3 Plán výdaj Vechny výdaje si sepíu do pehledné tabulky s tmito sloupci: name  název poloky, cost  ástka bez DPH, cur  mna, vatr  sazba DPH, period  za jaké období se výdaj opakuje; me být month (msíc), quarter (tvrtletí), nebo year (rok), month  íslo msíce v roce, ve kterém poprvé zaplatím, day  íslo dne v msíci, ve kterém zaplatím. costs &lt;- tribble( ~name, ~cost, ~cur, ~vatr, ~period, ~month, ~day, &quot;Úetnictví&quot;, 9300.00, &quot;CZK&quot;, 0, &quot;quarter&quot;, 1, 25, &quot;O2&quot;, 1650.31, &quot;CZK&quot;, 21, &quot;month&quot;, 1, 1, &quot;T-Mobile&quot;, 948.35, &quot;CZK&quot;, 21, &quot;month&quot;, 1, 10, &quot;Toggl&quot;, 10.00, &quot;USD&quot;, 0, &quot;month&quot;, 1, 6, &quot;Fakturoid&quot;, 5280.00, &quot;CZK&quot;, 21, &quot;year&quot;, 3, 1, &quot;Basecamp&quot;, 12.00, &quot;USD&quot;, 0, &quot;month&quot;, 1, 19, &quot;Screaming Frog&quot;, 149.00, &quot;GBP&quot;, 0, &quot;year&quot;, 1, 20 ) costs Z tabulky costs si nyní vygeneruji tabulku cost_by_date, která bude v daném roce obsahovat jednotlivé výdaje v den, kdy je zaplatím. Postupn provedu tyto kroky: Do objektu year si uloím rok, pro který chci plán spoítat. Funkcí left_join spojím tabulku náklad s odpovídajícími kurzy z kurzovního lístku (je to dost podobné excelovské funkci VLOOKUP resp. SVYHLEDAT). Protoe má kurz v kurzovním lístku stran dlouhé jméno, pejmenuju ho funkcí rename na kratí. Pomocí mutate spoítám cenu v eských korunách a DPH. Pomocí mutate vytvoím sloupec date, který bude na kadém ádku obsahovat celou posloupnost dat plateb jako seznam (list). Funkcí unnest_longer tyto seznamy dat plateb rozloím na samostatné ádky. A nakonec u jen funkcí select vyberu sloupce, které chci zahrnout do výsledku. year &lt;- 2022 costs_by_date &lt;- costs |&gt; left_join(exchange_rates, by = c(&quot;cur&quot; = &quot;currency&quot;)) |&gt; rename(ex_rate = last_col()) |&gt; mutate( cost_czk = round(cost / ex_rate, 2), vat = round(cost_czk * (vatr / 100), 2) ) |&gt; rowwise() |&gt; mutate( date = list(seq(make_date(year, month, day), make_date(year, 12, 31), by = period)) ) |&gt; ungroup() |&gt; unnest_longer(date) |&gt; select(date, name, cost_czk, vat) costs_by_date 7.2.4 Plán píjm Nyní vytvoím tabulku odhadovaných výnos revenue_by_date. Bude se jednat o msíní píjmy, které dostanu v prmru okolo 15. dne následujícího msíce. Vypoítají se z odhadu fakturovaných hodin vynásobených hodinovou sazbou. Poet fakturovaných hodin bude náhodn fluktuovat +/- 5 hodin okolo prmru. DPH je 21 %. average_hours &lt;- 100 hourly_rate &lt;- 800 revenue_by_date &lt;- tibble( date = seq(make_date(year, 1, 15), length = 12, by = &quot;month&quot;), revenue = round(runif(12, average_hours - 5, average_hours + 5)) * hourly_rate, vat = revenue * 0.21 ) revenue_by_date 7.2.5 Spojený plán píjm a výdaj Zbývá spoítat cash flow a hezky ho zobrazit. Postup u podrobn vysvtlovat nebudu. Jakmile uvidíte funkci, kterou neznáte, dejte si na ni kurzor, zmáknte F1 a ve potebné se dozvíte z nápovdy. costs_by_date |&gt; transmute( date, cash_flow = -(cost_czk + vat) ) |&gt; bind_rows( revenue_by_date |&gt; transmute( date, cash_flow = revenue + vat ) ) |&gt; group_by(date) |&gt; summarise(cash_flow = sum(cash_flow)) |&gt; ggplot(aes(x = date, y = cumsum(cash_flow))) + geom_line() + scale_y_continuous(labels = scales::comma) + scale_x_date(date_breaks = &quot;month&quot;, date_labels = &quot;%b&quot;) + labs(x = &quot;datum&quot;, y = &quot;zstatek K&quot;) Má to jednu vadu, e? Nejsou tam odvody DPH. Tak jet jednou a pro jistotu to rozdlím do dvou krok, a to jde lépe zkontrolovat. Nejprve tabulka cash flow podle dní: cash_flow_by_date &lt;- costs_by_date |&gt; transmute( date, name, cash_flow = -(cost_czk + vat) ) |&gt; bind_rows( revenue_by_date |&gt; transmute( date, name = &quot;píjem&quot;, cash_flow = revenue + vat ) ) |&gt; # Zde pidám DPH na vstupu bind_rows( costs_by_date |&gt; group_by( date = quarter(date, type = &quot;date_last&quot;) + 25, name = &quot;DPH na vstupu&quot; ) |&gt; summarise(cash_flow = sum(vat)) ) |&gt; # Zde pidám DPH na výstupu bind_rows( revenue_by_date |&gt; group_by( date = quarter(date, type = &quot;date_last&quot;) + 25, name = &quot;DPH na výstupu&quot; ) |&gt; summarise(cash_flow = -sum(vat)) ) ## `summarise()` has grouped output by &#39;date&#39;. You can override using the ## `.groups` argument. ## `summarise()` has grouped output by &#39;date&#39;. You can override using the ## `.groups` argument. cash_flow_by_date A nakonec graf: cash_flow_by_date |&gt; group_by(date) |&gt; summarise(cash_flow = sum(cash_flow)) |&gt; ggplot(aes(x = date, y = cumsum(cash_flow))) + geom_line() + scale_y_continuous(labels = scales::comma) + scale_x_date(date_breaks = &quot;month&quot;, date_labels = &quot;%b&quot;) + labs(x = &quot;datum&quot;, y = &quot;zstatek K&quot;) A to je vechno :-) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
